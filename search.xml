<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES6模块化语法</title>
      <link href="/2022/08/10/%E5%B7%A5%E5%85%B7%E7%AF%87/ES6%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2022/08/10/%E5%B7%A5%E5%85%B7%E7%AF%87/ES6%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-ES6-模块化"><a href="#1-ES6-模块化" class="headerlink" title="1. ES6 模块化"></a>1. ES6 模块化</h2><p>1.1 回顾：node.js 模块化</p><p>node.js 遵循了 CommonJS 的模块化规范。其中：</p><ul><li>导入其它模块使用 require() 方法</li><li>模块对外共享成员使用 module.exports  对象</li></ul><p>模块化的好处：</p><p>大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己。</p><h2 id="1-2-前端模块化的分类-了解"><a href="#1-2-前端模块化的分类-了解" class="headerlink" title="1.2 前端模块化的分类 (了解)"></a>1.2 前端模块化的分类 (了解)</h2><p>在 ES6 模块化规范诞生之前，JavaScript 社区已经尝试并提出了 AMD (国外 requirejs)、CMD (国内 seajs 淘宝)、CommonJS (nodejs) 等模块化规范</p><p>但是，这些由社区提出的模块化标准，还是存在一定的差异性与局限性、并不是浏览器与服务器通用的模块化标准</p><p>例如:</p><ul><li>AMD 和 CMD 适用于浏览器端的 Javascript 模块化</li><li>CommonJS 适用于服务器端的 Javascript 模块化</li></ul><p>太多的模块化规范给开发者增加了学习的难度与开发的成本。因此，大一统的  ES6 模块化  规范诞生了！</p><h2 id="1-3-什么是-ES6-模块化规范-统一"><a href="#1-3-什么是-ES6-模块化规范-统一" class="headerlink" title="1.3 什么是 ES6 模块化规范 (统一)"></a>1.3 什么是 ES6 模块化规范 (统一)</h2><p>ES6 模块化规范是浏览器端与服务器端通用的模块化开发规范。</p><p>它的出现极大的降低了前端开发者的模块化学习成本，开发者不需再额外学习 AMD、CMD 或 CommonJS 等模块化规范</p><p>ES6 模块化规范中定义：</p><ul><li>每个 js 文件都是一个独立的模块</li><li>导入其它模块成员使用 import  关键字</li><li>向外共享模块成员使用 export 关键字</li></ul><p>1.4 在 node.js 中体验 ES6 模块化</p><p>node.js 中默认仅支持 CommonJS 模块化规范，若想基于 node.js 体验与学习 ES6 的模块化语法，</p><p>可以按照如下两个步骤进行配置：</p><ol><li>确保安装了 v14.15.1 或更高版本的 node.js</li><li>在 package.json 的根节点中添加 “type”: “module” 节点</li></ol><h2 id="1-5-模块化的基本语法"><a href="#1-5-模块化的基本语法" class="headerlink" title="1.5 模块化的基本语法"></a>1.5 模块化的基本语法</h2><p>ES6 的模块化主要包含如下 3 种用法：</p><ul><li>默认导出 和 默认导入</li><li>按需导出 和 按需导入</li><li>直接导入 并 执行模块中的代码</li></ul><p>1.5.1 默认导出 和 默认导入</p><p>默认导出的语法： export default 默认导出的成员</p><p>默认导入的语法： import 接收名称 from ‘模块标识符’</p><p>默认导出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const a = 10</span><br><span class="line">const b = 20</span><br><span class="line"></span><br><span class="line">const fn  = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;这是一个函数&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 默认导出</span><br><span class="line">// export default a  // 导出一个值</span><br><span class="line">export default &#123;</span><br><span class="line">  a,</span><br><span class="line">  b,</span><br><span class="line">  fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认导入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import result from &#x27;./xxx.js&#x27;</span><br><span class="line">console.log(result)</span><br></pre></td></tr></table></figure><p>注意点: </p><ul><li>每个模块中，只允许使用唯一的一次 export default !</li><li>默认导入时的接收名称可以任意名称，只要是合法的成员名称即可</li></ul><h2 id="1-5-2-按需导入与按需导出"><a href="#1-5-2-按需导入与按需导出" class="headerlink" title="1.5.2 按需导入与按需导出"></a>1.5.2 按需导入与按需导出</h2><p>按需导出的语法： export const a &#x3D; 10</p><p>按需导入的语法： import { a } from ‘模块标识符’</p><p>按需导出</p><pre><code>export const a = 10export const b = 20export const fn = () =&gt; &#123;  console.log(&#39;内容&#39;)&#125;</code></pre><p>按需导入</p><pre><code>import &#123; a, b as c, fn &#125; from &#39;./xxx.js&#39;</code></pre><p>注意点:</p><ul><li>每个模块中可以使用多次按需导出</li><li>按需导入的成员名称必须和按需导出的名称保持一致</li><li>按需导入时，可以使用as 关键字进行重命名</li><li>按需导入可以和默认导入一起使用</li></ul><p>1.5.3 直接导入执行模块代码</p><p>如果只想单纯地执行某个模块中的代码，并不需要得到模块中向外共享的成员。</p><p>此时，可以直接导入并执行模块代码</p><pre><code>import &#39;./xxx.js&#39;</code></pre><h2 id="2-前置-yarn-包管理器"><a href="#2-前置-yarn-包管理器" class="headerlink" title="2. 前置 - yarn 包管理器"></a>2. 前置 - yarn 包管理器</h2><p>快速、可靠、安全的依赖管理工具。和 npm 类似, 都是包管理工具, 可以用于下载包 </p><pre><code>npm i jquery</code></pre><p>下载地址: <a href="https://yarn.bootcss.com/docs/install/#windows-stable">https://yarn.bootcss.com/docs/install/#windows-stable</a> </p><p>windows本  推荐通过软件包  安装 (教学资料中)</p><pre><code>npm i yarn -g</code></pre><p>mac本通过命令全局安装</p><pre><code>sudo npm i yarn -g</code></pre><p>基本命令:</p><pre><code>1. 初始化    yarn init  /  yarn init -y2. 添加依赖    yarn add [package]    yarn add [package]@[version]3. 移除包    yarn remove [package]             4. 安装项目全部依赖                yarn 或者 yarn install5. 全局    安装: yarn global add [package]    卸载: yarn global remove [package]</code></pre><h2 id="3-webpack概述"><a href="#3-webpack概述" class="headerlink" title="3. webpack概述"></a>3. webpack概述</h2><p>webpack 是一个基于 NodeJS 的 静态模块打包器 (module bundler)</p><p>将来要学的 vue-cli 脚手架环境, 集成了 webpack, 所以才能对各类文件进行打包处理 </p><p>webpack官网</p><p>3.1 webpack 能做什么</p><p>webpack是一个 静态模块 打包器</p><ol><li>语法转换<ul><li>less&#x2F;sass转换成css</li><li>ES6转换成ES5</li><li>typescript转换成原生js</li><li>…</li></ul></li><li>html&#x2F;css&#x2F;js 代码压缩合并 (打包)</li><li>webpack可以在开发期间提供一个开发服务器， 提高开发效率</li></ol><p>项目一般先打包再上线</p><h2 id="3-2-webpack-基本使用"><a href="#3-2-webpack-基本使用" class="headerlink" title="3.2 webpack - 基本使用"></a>3.2 webpack - 基本使用</h2><p>注意: 文档有可能不全的, 先按照我们笔记步骤, 先配置, 先上手</p><p>以后开发: 对着官网, 对着博客, 去配 (博客的时间, 找近几年的)</p><p><a href="https://webpack.docschina.org/">https://webpack.docschina.org/</a></p><h2 id="3-3-webpack-打包演示"><a href="#3-3-webpack-打包演示" class="headerlink" title="3.3 webpack 打包演示"></a>3.3 webpack 打包演示</h2><ol><li>建目录  dist    src&#x2F;main.js</li><li>初始化<br>yarn init -y</li><li>安装依赖包  ( -D: 将安装包作为开发阶段的依赖, 只在开发阶段使用, 实际上线不要的, 可以加 -D)<br>dependencies  项目依赖, 实际上线, 也要用的包, 比如 jquery    yarn add jquery<br>devDependencies 开发依赖, 实际上线, 不用这个包, 只在开发打包过程中用   -D<br>yarn add webpack  webpack-cli  -D</li><li>配置scripts<br>scripts: {<br>    “build”: “webpack –config webpack.config.js”<br>}<br>–config  webpack.config.js 这个配置文件名为默认值, 不加也会默认找这个文件</li><li>提供 webpack.config.js<br>基础版本<br>module.exports &#x3D; {<br>  &#x2F;&#x2F; 入口: 从哪个文件开始打包<br>  entry: ‘.&#x2F;src&#x2F;main.js’<br>}</li><li>执行脚本<br>yarn build</li></ol><p>小测试:</p><pre><code>假定在main.js中导入一个  aa.js,  多个文件需要打包, wepack会打包成一个文件, 可以节约请求的次数import &#39;./js/aa.js&#39;console.log(&#39;这是main模块&#39;)</code></pre><h2 id="3-4-package-json-中-scripts的使用说明"><a href="#3-4-package-json-中-scripts的使用说明" class="headerlink" title="3.4 package.json 中 scripts的使用说明"></a>3.4 package.json 中 scripts的使用说明</h2><p>在package.json文件中, 可以配置 scripts …  配置自己的命令</p><pre><code>&quot;scripts&quot;: &#123;    &quot;pp&quot;: &quot;yarn add jquery&quot;,    &quot;build&quot;: &quot;webpack --config webpack.config.js&quot;&#125;yarn xxxnpm run ppnpm run build</code></pre><p>运行方式:  npm  run  xx</p><p>特殊的命令:  start &#x2F; stop  可以省略 run</p><pre><code>npm run start  =&gt; npm start      =&gt;  yarn startnpm run stop  =&gt; npm stop        =&gt;  yarn stop</code></pre><p>使用 yarn 直接不需要加 run  </p><pre><code>npm run pp  =&gt;  yarn ppnpm run build =&gt; yarn build</code></pre><h2 id="3-5-基本配置-配置入口出口模式"><a href="#3-5-基本配置-配置入口出口模式" class="headerlink" title="3.5 基本配置 - 配置入口出口模式"></a>3.5 基本配置 - 配置入口出口模式</h2><p>参考文档:   <a href="https://webpack.docschina.org/concepts/#%E5%85%A5%E5%8F%A3-entry-">https://webpack.docschina.org/concepts/#入口-entry-</a> </p><pre><code>const path = require(&#39;path&#39;)module.exports = &#123;  // entry: 配置入口文件 (从哪个文件开始打包)   entry: &#39;./src/main.js&#39;,  // output: 配置输出 (打包到哪去)  output: &#123;    // 打包输出的目录 (必须是绝对路径)    path: path.join(__dirname, &#39;dist&#39;),    // 打包生成的文件名    filename: &#39;bundle.js&#39;  &#125;,  // 打包模式 production 压缩/development 不压缩  mode: &#39;development&#39;&#125;</code></pre><p>重新 yarn build 打包</p><p>3.6 基于 webpack 实现隔行变色</p><p>需求: 使用 jquery 隔行变色</p><ol><li><p>新建  public&#x2F;index.html 编写代码</p></li><li><p>在 index.html 中新建一些 li 玩玩</p> <!DOCTYPE html> <html lang="en"> <head>   <meta charset="UTF-8">   <meta name="viewport" content="width=device-width, initial-scale=1.0">   <meta http-equiv="X-UA-Compatible" content="ie=edge">   <title>Document</title> </head> <body>  <div id="app">   <!-- ul>li{我是第$个li}*10 -->   <ul>     <li>我是第1个li</li>     <li>我是第2个li</li>     <li>我是第3个li</li>     <li>我是第4个li</li>     <li>我是第5个li</li>     <li>我是第6个li</li>     <li>我是第7个li</li>     <li>我是第8个li</li>     <li>我是第9个li</li>   </ul> </div>  </body> </html></li><li><p>安装jquery， 编写代码</p><p> yarn add jquery</p></li></ol><p>main.js</p><pre><code>// 需求: 通过jquery实现隔行变色import $ from &#39;jquery&#39;$(function() &#123;  $(&#39;#app li:nth-child(odd)&#39;).css(&#39;color&#39;, &#39;red&#39;)  $(&#39;#app li:nth-child(even)&#39;).css(&#39;color&#39;, &#39;green&#39;)&#125;)</code></pre><ol><li><p>执行打包命令</p><p> yarn build</p></li><li><p>将 public&#x2F;index.html 手动拷贝到 dist 目录， 手动引入打包后的 js</p> <script src="./bundle.js"></script></li></ol><p>3.7 webpack - 插件 和 loaders的配置</p><p>3.7.1 自动生成html - html-webpack-plugin 插件</p><p>每次都要将 public&#x2F;index.html 手动拷贝到 dist 目录， 手动引入打包后的 js， 太麻烦</p><p>所以一般会用一个插件, 会自动拷贝到 dist下, 并自动引入</p><ol><li>下载<br>yarn add html-webpack-plugin  -D</li><li>在webpack.config.js文件中，引入这个模块 :<br>&#x2F;&#x2F; 引入自动生成 html 的插件<br>const HtmlWebpackPlugin &#x3D; require(‘html-webpack-plugin’)</li><li>配置<br>plugins: [<br>  new HtmlWebpackPlugin({ template: ‘.&#x2F;public&#x2F;index.html’ })<br>]</li></ol><p>配置好了之后, public 目录的 index.html 就不需要引入打包后的文件了, 会自动被插件生成 html 引入</p><p>public&#x2F;index.html</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;  &lt;meta charset=&quot;UTF-8&quot;&gt;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;  &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;app&quot;&gt;  &lt;!-- ul&gt;li&#123;我是第$个li&#125;*10 --&gt;  &lt;ul&gt;    &lt;li&gt;我是第1个li&lt;/li&gt;    &lt;li&gt;我是第2个li&lt;/li&gt;    &lt;li&gt;我是第3个li&lt;/li&gt;    &lt;li&gt;我是第4个li&lt;/li&gt;    &lt;li&gt;我是第5个li&lt;/li&gt;    &lt;li&gt;我是第6个li&lt;/li&gt;    &lt;li&gt;我是第7个li&lt;/li&gt;    &lt;li&gt;我是第8个li&lt;/li&gt;    &lt;li&gt;我是第9个li&lt;/li&gt;  &lt;/ul&gt;&lt;/div&gt;&lt;!-- 打包后的文件会被自动引入, 不需要手动引入了 --&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="3-7-2-webpack中处理-css-文件-css-loader"><a href="#3-7-2-webpack中处理-css-文件-css-loader" class="headerlink" title="3.7.2 webpack中处理 css 文件 - css-loader"></a>3.7.2 webpack中处理 css 文件 - css-loader</h2><p>webpack默认只认识 js 文件和 json文件, 但是webpack 可以使用 loader 来加载预处理文件, 允许webpack也可以打包 js之外的静态资源。</p><p>所以webpack如果要处理其他文件类型, 记得要先配置对应的 loader</p><p>需求: 去掉小圆点, 新建 css 目录</p><ol><li>安装依赖<br>yarn add style-loader css-loader -D</li><li>配置<br>module: {<br>  &#x2F;&#x2F; loader的规则<br>  rules: [<br>    {<br>      &#x2F;&#x2F; 正则表达式，用于匹配所有的css文件<br>      test: &#x2F;.css$&#x2F;,<br>      &#x2F;&#x2F; 先用 css-loader 让webpack能够识别 css 文件的内容<br>      &#x2F;&#x2F; 再用 style-loader 将样式, 以动态创建style标签的方式添加到页面中去<br>      use: [ “style-loader”, “css-loader”]<br>    }<br>  ]<br>},</li></ol><p>3.7.3 分离 css 文件 mini-css-extract-plugin</p><p>我们上面的操作，使得css和js文件混杂在一起了，那有没有什么办法把css分离出来呢？ </p><p>插件: mini-css-extract-plugin</p><ol><li><p>安装依赖包<br>yarn add mini-css-extract-plugin -D</p></li><li><p>在webpack.config.js文件中，引入这个模块<br>&#x2F;&#x2F; 引入分离 css 文件的 模块<br>const MiniCssExtractPlugin &#x3D; require(‘mini-css-extract-plugin’)</p></li><li><p>配置loaders<br>&#x2F;&#x2F; 模块加载<br>module: {<br>  &#x2F;&#x2F; loader的规则<br>  rules: [<br>    &#x2F;&#x2F; 配置 css 文件的解析<br>    {<br>      test: &#x2F;.css$&#x2F;,<br>      use: [ &#x2F;&#x2F; 根据官方文档写的，注意’css-loader’的书写位置<br>        MiniCssExtractPlugin.loader,<br>        ‘css-loader’<br>      ]<br>    },<br>  ],<br>}</p></li><li><p>插件的配置<br>plugins: [<br>  new HtmlWebpackPlugin({ template: ‘.&#x2F;public&#x2F;index.html’ }),<br><br>  &#x2F;&#x2F; 定义打包好的文件的存放路径和文件名<br>  new MiniCssExtractPlugin({<br>         filename:’css&#x2F;index.css’<br>  })<br><br>],</p></li></ol><p>3.7.4 webpack 中处理 less - less-loader</p><ol><li><p>下载依赖包<br>注意: 解析less文件需要识别 less 语法, 所以除了 less-loader  需要额外下载 less 包<br>less-loader: 将less转换成 css<br>yarn add less  less-loader  -D</p></li><li><p>配置<br>&#x2F;&#x2F; 配置 less 文件的解析<br>{<br>  test: &#x2F;.less$&#x2F;,<br>  use: [<br>    &#x2F;&#x2F; 分离出 css 内容<br>    MiniCssExtractPlugin.loader,<br>    ‘css-loader’,<br>    ‘less-loader’<br>  ]<br>}</p></li></ol><p>3.7.5 webpack 中处理图片 - 内置的 asset module</p><p>我们试了一下，在项目中使用一下 img 图片。结果就报错了，难道webpack连图片也认不出来吗？</p><pre><code>import imgObj from &#39;./imgs/01.jpg&#39;$(function() &#123;  const $img = $(&#39;&lt;img&gt;&#39;)  $img.attr(&#39;src&#39;, imgObj)  $(&#39;#app .header&#39;).append($img)&#125;)</code></pre><p>没有错，的确认不出来,   此时需要用webpack5 内置的 asset 资源处理模块，来处理图片资源。</p><p>webpack5 处理资源： <a href="https://webpack.docschina.org/guides/asset-modules/">https://webpack.docschina.org/guides/asset-modules/</a></p><p>tips: webpack4 中来处理图片的问题,  主要用到 url-loader  和   file-loader 两个模块， 现 webpack5 已集成，无需安装。</p><p>配置 rules 基本规则： </p><pre><code>&#123;  test: /\.(png|jpg|gif|jpeg)$/i,  type: &#39;asset&#39;&#125;</code></pre><p>（1）对于小于 8k 的图片，会自动转 base64 字符串（节约请求次数，成本：放大约30%的图片体积大小）</p><p>（2）对于大于 8k 的图片，会生成单独文件引入。</p><p>配置图片的打包输出目录：</p><p>默认是直接输出到了 dist 根目录, 可以通过  generator  进行配置</p><pre><code>&#123;  test: /\.(png|jpg|gif|jpeg)$/i,  type: &#39;asset&#39;,  generator: &#123;    filename: &#39;images/[hash][name][ext]&#39;  &#125;&#125;</code></pre><p>3.8 webpack 配置字体图标 - 和图片一致</p><p>字体图标 和 图片的配置一致</p><pre><code>// 处理字体图标的解析&#123;  test: /\.(eot|svg|ttf|woff|woff2)$/,  type: &#39;asset&#39;,  generator: &#123;    filename: &#39;fonts/[hash][ext]&#39;  &#125;&#125;</code></pre><h2 id="3-9-webpack-使用-babel-处理高版本的-js-语法"><a href="#3-9-webpack-使用-babel-处理高版本的-js-语法" class="headerlink" title="3.9 webpack 使用 babel 处理高版本的 js 语法"></a>3.9 webpack 使用 babel 处理高版本的 js 语法</h2><p>webpack 默认仅内置了 模块化的 兼容性处理   import  export</p><p>babel 的介绍 &#x3D;&gt; 用于处理高版本 js语法 的兼容性</p><ol><li><p>安装包<br>yarn add -D babel-loader @babel&#x2F;core @babel&#x2F;preset-env</p></li><li><p>配置规则<br>module: {<br>  rules: [<br>    {<br>      test: &#x2F;.js$&#x2F;,<br>      exclude: &#x2F;(node_modules|bower_components)&#x2F;,<br>      use: {<br>        loader: ‘babel-loader’,<br>        options: {<br>          presets: [‘@babel&#x2F;preset-env’]<br>        }<br>      }<br>    }<br>  ]<br>}</p></li><li><p>webpack - Source Map</p></li></ol><h2 id="4-1-什么是Source-Map"><a href="#4-1-什么是Source-Map" class="headerlink" title="4.1 什么是Source Map?"></a>4.1 什么是Source Map?</h2><p>Source Map 就是一个信息文件，里面储存着位置信息。</p><p>也就是说，Source Map 文件中存储着代码压缩混淆前后的对应关系。有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码，能够极大的方便后期的调试。</p><p>4.2 开发环境下的 Source Map?</p><p>在开发环境下，webpack 默认启用了 Source Map 功能。当程序运行出错时，可以直接在控制台提示错误行的位置，并定位到具体的源代码, 但错误行数有时会对不上:</p><p>需要配置:</p><pre><code>// eval-source-map 仅限在&quot;开发模式&quot;下使用, 不建议在&quot;生产模式&quot;下使用// 此选项生产的Source Map能够保证&quot;运行时报错的行数&quot;与&quot;源代码的行数&quot;保持一直// devtool: &#39;eval-source-map&#39;,devtool: &#39;eval-source-map&#39;</code></pre><p>4.3 生产环境下的 Source Map?</p><p>在生产环境下，如果没有配置devtool 选项，则最终生成的文件中不启用Source Map功能。这能够防止原始代码通过Source Map 的形式暴露给别有所图之人。</p><p>需求:  在生产环境下，只想定位报错的具体行数，但不想暴露源码。主要是方便快速定位到bug, 快速修复!</p><p>此时可以配置:</p><pre><code>devtool: &#39;nosources-source-map&#39;</code></pre><p>实际效果如图所示：</p><h2 id="4-4-Source-Map-的最佳实践"><a href="#4-4-Source-Map-的最佳实践" class="headerlink" title="4.4 Source Map 的最佳实践"></a>4.4 Source Map 的最佳实践</h2><ul><li><p>开发环境下：<br>建议把 devtool的值设置为 eval-source-map<br>好处：可以精准定位到具体的错误行。</p></li><li><p>生产环境下：<br>建议关闭 Source Map或将 devtool的值设置为 nosources-source-map </p><p>好处：防止源码泄露，提高网站的安全性。</p></li></ul><ol start="5"><li>webpack - watch</li></ol><p>使用watch mode(观察模式)</p><p>直接执行yarn build命令的话，就是执行一次编译一次, 多次调试会显得很麻烦,  我们可以配置watch模式,  来监视项目中的文件更改，并在文件更改时重新编译; </p><p>换句话说，修改了内容之后只要刷新浏览器就可以看到最新的效果,  不需要再手动执行yarn build命令重新编译了。</p><ol><li><p>运行时在命令后面加–watch</p><p> yarn build –watch</p></li><li><p>webpack.config.js中配置</p><p> module.exports &#x3D; {<br>   watch: true, &#x2F;&#x2F; 启用 watch 模式<br>   watchOptions: {<br> &#x2F;&#x2F; 忽略监视node_modules文件夹中的内容变化<br> ignored: &#x2F;node_modules&#x2F;,<br>   }<br> }</p></li></ol><p>执行一次编译多次</p><p>只要你修改了相关的文件，就会重新触发编译。这个比较适合多次反复调试的情况。</p><h2 id="6-webpack-开发服务器"><a href="#6-webpack-开发服务器" class="headerlink" title="6. webpack - 开发服务器"></a>6. webpack - 开发服务器</h2><p>6.1 webpack-dev-server自动刷新</p><ol><li><p>下载</p><p> yarn add webpack-dev-server -D</p></li><li><p>配置scripts</p><p> “scripts”: {<br> “build”: “webpack –config webpack.config.js”,<br> “dev”: “webpack serve –config webpack.config.js”<br> }</p></li></ol><p>6.2 webpack-dev-server 的配置</p><p>webpack-dev-server配置文档:  <a href="https://webpack.docschina.org/configuration/dev-server/#devserverafter">https://webpack.docschina.org/configuration/dev-server/#devserverafter</a></p><pre><code>devServer: &#123;  port: 3000, // 端口号  open: true // 自动打开浏览器&#125;</code></pre><p>webpack-dev-server和watch的区别:</p><p>webpack-der-server 监测到代码变化后，浏览器可以看到及时更新的效果，但是并没有自动打包修改的代码</p><p>yarn build –watch 在监测到代码变化后自动打包修改的代码</p>]]></content>
      
      
      <categories>
          
          <category> 模块类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高阶函数之柯里化</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E4%B9%8B%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E4%B9%8B%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><p>在计算机中，柯里化是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术<br>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * a + b * b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="title function_">foo</span>(<span class="number">3</span>))(<span class="number">4</span>) 或 <span class="title function_">foo</span>(<span class="number">3</span>)(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="柯里化的通用式"><a href="#柯里化的通用式" class="headerlink" title="柯里化的通用式"></a>柯里化的通用式</h3><ol><li>使用ES5的实现</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5 的实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">func, args</span>) &#123;</span><br><span class="line">    <span class="comment">// 形参个数</span></span><br><span class="line">    <span class="keyword">var</span> arity = func.<span class="property">length</span>;</span><br><span class="line">    <span class="comment">// 上一次传入的参数</span></span><br><span class="line">    <span class="keyword">var</span> args = args || [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 将参数转化为数组</span></span><br><span class="line">        <span class="keyword">var</span> _args = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将上次的参数与当前参数进行组合并修正传参顺序</span></span><br><span class="line">        <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">unshift</span>.<span class="title function_">apply</span>(_args, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果参数不够，返回闭包函数继续收集参数</span></span><br><span class="line">        <span class="keyword">if</span>(_args.<span class="property">length</span> &lt; arity) &#123;</span><br><span class="line">            <span class="keyword">return</span> currying.<span class="title function_">call</span>(<span class="literal">null</span>, func, _args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数够了则直接执行被转化的函数</span></span><br><span class="line">        <span class="keyword">return</span> func.<span class="title function_">apply</span>(<span class="literal">null</span>, _args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用ES6简化写法</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">func, ...args</span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// func.length 是获取一个函数对象的形参的个数，实参的个数用arguments.length</span></span><br><span class="line"> <span class="comment">// 如果形参指定的默认值，则只获取指定默认值前面形参的个数</span></span><br><span class="line">  <span class="keyword">var</span> argLen = func.<span class="property">length</span></span><br><span class="line">  <span class="keyword">var</span> args = args || []</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">..._args</span>) &#123;</span><br><span class="line">    _args.<span class="title function_">unshift</span>(...args)</span><br><span class="line">    <span class="keyword">if</span> (_args.<span class="property">length</span> &lt; argLen) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 传入的参数数量小于回调函数的形参数量，返回接受剩余参数的函数</span></span><br><span class="line">      <span class="keyword">return</span> currying.<span class="title function_">call</span>(<span class="literal">null</span>, func, ..._args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">func</span>(..._args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行一下测试用例</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 比如我现在有一个callback的方法，需要指定三个参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果只需要两个参数,可以给第三个参数一个默认值，因为第三个参数有默认值，func.length值为2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">a, b, c = <span class="number">0</span></span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> a + b + c <span class="comment">// 相当于 return a + b + 0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> r = <span class="title function_">currying</span>(callback)</span><br><span class="line"><span class="title function_">r</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 返回接受剩余参数的新的函数</span></span><br><span class="line"><span class="title function_">r</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">r</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>) <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">r</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="comment">// r(...)(...)(...) is not a function 参数超过callback的参数报错</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高阶函数之柯里化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue之vuex模块化管理</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue%E4%B9%8Bvuex%E6%A8%A1%E5%9D%97%E5%8C%96%E7%AE%A1%E7%90%86/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue%E4%B9%8Bvuex%E6%A8%A1%E5%9D%97%E5%8C%96%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="vue3-0的使用"><a href="#vue3-0的使用" class="headerlink" title="vue3.0的使用"></a>vue3.0的使用</h2><h2 id="安装vuex-新建store文件夹"><a href="#安装vuex-新建store文件夹" class="headerlink" title="安装vuex-新建store文件夹"></a>安装vuex-新建store文件夹</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vuex@next --save</span><br></pre></td></tr></table></figure><p>并在根目录<code>src</code>下创建store文件夹，并创建文件模块</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">└─src</span><br><span class="line">    ├─assets</span><br><span class="line">    ├─components</span><br><span class="line">    ├─store</span><br><span class="line">    │  └─modules</span><br><span class="line">    │  └─└─moduleA.js</span><br><span class="line">    │  └─└─moduleB.js</span><br><span class="line">    │  └─index.js</span><br><span class="line">    │  └─getters.js</span><br><span class="line">    └─util</span><br></pre></td></tr></table></figure><h3 id="在store文件夹中配置根store"><a href="#在store文件夹中配置根store" class="headerlink" title="在store文件夹中配置根store"></a>在store文件夹中配置根store</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> moduleA <span class="keyword">from</span> <span class="string">&#x27;./modules/moduleA&#x27;</span></span><br><span class="line"><span class="keyword">import</span> moduleB <span class="keyword">from</span> <span class="string">&#x27;./modules/moduleB&#x27;</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    moduleA,</span><br><span class="line">    moduleB</span><br><span class="line">  &#125;,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br><span class="line"><span class="comment">// getters.js</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="attr">token</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">token</span>,</span><br><span class="line">  <span class="attr">hasPermission</span>: <span class="function"><span class="params">state</span> =&gt;</span> <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">user</span>.<span class="property">permissions</span> &amp;&amp; state.<span class="property">user</span>.<span class="property">permissions</span>.<span class="title function_">indexOf</span>(key) &gt; -<span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br><span class="line"></span><br><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">hasLogin</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutation</span>: &#123;</span><br><span class="line">    <span class="title function_">changeLoginStatus</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">hasLogin</span> = !state.<span class="property">hasLogin</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> moduleA</span><br></pre></td></tr></table></figure><h4 id="使用store"><a href="#使用store" class="headerlink" title="使用store"></a>使用store</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Store</span> <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Store</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="在文件中使用store"><a href="#在文件中使用store" class="headerlink" title="在文件中使用store"></a>在文件中使用store</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeLoginStatus&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">_mutations</span>) <span class="comment">//打印所有的mutations&lt;/code&gt;&lt;/pre&gt;</span></span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><blockquote><p>默认情况下，模块内部的 action 和 mutation 仍然是注册在全局名空间的——这样使得多个模块能够对同一个 action 或 mutation 作出响应。Getter 同样也默认注册在全局命名空间，但是目前这并非出于功能上的目的（仅仅是维持现状来避免非兼容性变更）。</p></blockquote><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>必须注意，不要在不同的无命名空间的模块中定义两个相同的 getter 从而导致错误。<br>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 <code>getter、action</code> 及mutation 都会自动根据模块注册的路径调整命名</p></div><p>例如：</p></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">state</span>: &#123;...&#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时在文件使用此模块需要带上模块名</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;moduleA/hasLogin&#x27;</span>,preload)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript之try...catch...使用</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/javascript%E4%B9%8Btry-catch-%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/javascript%E4%B9%8Btry-catch-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简单的try-catch使用"><a href="#简单的try-catch使用" class="headerlink" title="简单的try-catch使用"></a>简单的try-catch使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;normal&#x27;</span>,error)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// normal ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure><p>控制台不会报错，catch到的信息会被显示出来，不影响后面的代码运行</p><h2 id="异步中的try-catch的使用"><a href="#异步中的try-catch的使用" class="headerlink" title="异步中的try-catch的使用"></a>异步中的try-catch的使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">asyncFun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">    &#125;,<span class="number">100</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;asyncError: &#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">asyncFun</span>() <span class="comment">// Uncaught ReferenceError: c is not defined</span></span><br></pre></td></tr></table></figure><blockquote><p>控制台会报错，setTimeout,setInterval等宏观任务会在主任务队列之后运行，当代码运行到settimeout的时候，会将宏观任务丢到新的任务栈。因此try捕获不到错误</p></p></blockquote><h2 id="try-catch配合Promise的使用"><a href="#try-catch配合Promise的使用" class="headerlink" title="try-catch配合Promise的使用"></a>try-catch配合Promise的使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">promiseFun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;错误信息&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">100</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> rows = <span class="keyword">await</span> <span class="title function_">promiseFun</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rows&#x27;</span>, rows)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promiseError&#x27;</span>, error)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// promiseError 错误信息&lt;/code&gt;&lt;/pre&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>try-catch会捕获到<code>reject</code>的错误信息，可已将异步操作放在<code>promise</code>中进行，实现try捕获异步的操作</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue之解析Excel表格</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/vue%E4%B9%8B%E8%A7%A3%E6%9E%90Excel%E8%A1%A8%E6%A0%BC/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/vue%E4%B9%8B%E8%A7%A3%E6%9E%90Excel%E8%A1%A8%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>安装xlsx</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i xlsx</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;file&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">accept</span>=<span class="string">&quot;.xlsx,.xls&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">&quot;readWorkbook($event)&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  * <span class="keyword">as</span> <span class="variable constant_">XLSX</span>  <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span>;</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="attr">files</span>: [],</span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">readWorkbook</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">files</span> = e.<span class="property">target</span>.<span class="property">files</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">filename</span> = <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>].<span class="property">name</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> file = <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">const</span> buffer = <span class="keyword">await</span> file.<span class="title function_">arrayBuffer</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;buffer: &#x27;</span>, buffer);</span><br><span class="line">    <span class="keyword">const</span> workbook = <span class="variable constant_">XLSX</span>.<span class="title function_">read</span>(buffer, &#123;<span class="attr">type</span>:<span class="string">&#x27;array&#x27;</span>&#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;workbook: &#x27;</span>, workbook);</span><br><span class="line">    <span class="keyword">const</span> wsname = workbook.<span class="property">SheetNames</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">// const ws = XLSX.utils.sheet_to_json(workbook.Sheets[wsname], &#123;header: 1&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#123;header: 1&#125;会转换成数组,但是会保留空白行 defval: &#x27;&#x27; 设置默认值占位</span></span><br><span class="line">    <span class="comment">// 可使用[&#x27;word&#x27;,&#x27;word&#x27;]自定义字段名称</span></span><br><span class="line">    <span class="keyword">const</span> ws = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">sheet_to_json</span>(workbook.<span class="property">Sheets</span>[wsname], &#123;<span class="attr">header</span>: [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;phone&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;department&#x27;</span>]&#125;) </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ws: &#x27;</span>, ws);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">throw</span> error</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript之手写Promise</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/javascript%E4%B9%8B%E6%89%8B%E5%86%99Promise/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/javascript%E4%B9%8B%E6%89%8B%E5%86%99Promise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>面试的时候遇到的问题，手写一个实现<code>Promise</code>的功能</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;PENDING&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;FULFILLED&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PromiseTest</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">PENDING</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">onResolvedCallbacks</span> = []</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = []</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">onFinallyCallbacks</span> = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">FULFILLED</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onResolvedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>())</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onFinallyCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">REJECTED</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = reason</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>())</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onFinallyCallbacks</span>.<span class="title function_">forEach</span>(<span class="title function_">fn</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="title function_">reject</span>(error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line">onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="keyword">throw</span> err &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">onRejected</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">  <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onResolvedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">  <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">finally</span>(<span class="params"> onFinally </span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onFinallyCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;<span class="title function_">onFinally</span>()&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;&lt;<span class="regexp">/code&gt;&lt;/</span>pre&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>测试案例<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;pre&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">&quot;language-javascript&quot;</span>&gt;</span>function a() &#123;</span></span><br><span class="line"><span class="language-xml">return new PromiseTest((resolve, reject) =&gt; &#123; </span></span><br><span class="line"><span class="language-xml">setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">  resolve(123)</span></span><br><span class="line"><span class="language-xml">&#125;,1000)</span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">let r = a()</span></span><br><span class="line"><span class="language-xml">r.then((result) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">console.log(&#x27;result: &#x27;, result);</span></span><br><span class="line"><span class="language-xml">&#125;).then(() =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">console.log(&#x27;result2&#x27;);</span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml">.catch(err =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">console.log(&#x27;err: &#x27;, err);</span></span><br><span class="line"><span class="language-xml">&#125;).finally(() =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">console.log(&#x27;完成promise&#x27;);</span></span><br><span class="line"><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml">//object</span></span><br><span class="line"><span class="language-xml">// 1s后</span></span><br><span class="line"><span class="language-xml">//result:  123</span></span><br><span class="line"><span class="language-xml">//result2</span></span><br><span class="line"><span class="language-xml">//完成promise</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue之强制刷新组件</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue%E4%B9%8B%E5%BC%BA%E5%88%B6%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue%E4%B9%8B%E5%BC%BA%E5%88%B6%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>有时候,依赖Vue响应式方式更新数据是不够的,相反,我们需要手动重新渲染组件来更新数据。或者,我们可能只想抛开当前DOM,重新开始。问题来了,怎么让Vue以正确的方式呈现组件呢?</blockquote>1.有以下解决方法:<pre><code>简单粗暴的方式:重新加载整个页面不妥的方式:使用 v-if较好的方式:使用 Vue的内置 forceUpdate方法</code></pre>2.对比以上方法:<pre><code>简单粗暴的方式(重新加载整个页面):这相当于每次你想关闭应用程序时都要重新启动你的电脑。不妥的方式(使用v-if):v-if指令,该指令尽在组件上为 true时才渲染。如果为false,则该组件在DOM中不存在。较好的方法(forceUpdate):这是解决这个问题的两种最佳方法之一。</code></pre>3.然而上面的三种方法都不是最佳的方法,最好的方法是:在组件上进行 key更改。<pre><code>在很多情况下,我们需要重新渲染组件。要正确地做到这一点,我们将提供一个 key 属性,以便Vue知道特定的组件与特定的数据片段相关联。如果 key 保持不变,则不会更改组件,但是如果 key 发生更改,Vue就hi知道应该删除旧组件并创建新组件。</code></pre>4.为什么我们需要在 Vue 中使用 key?<pre><code>假设我们要渲染具有以下一项或多项内容的组件列表:有本地的状态有某种初始化过程,通常在 create或mounted钩子中如果你对该列表进行排序或任何其他方式对其进行更新,则需要重新渲染列表的某些部分。但是,不会希望重新渲染列表的所有内容,而只是重新渲染已更改的内容。为了帮助Vue跟踪已更改和未更改的内容,我们提供一个 key 属性。在这里使用数组的索引,因为索引没有绑定列表中的特定的对象。</code></pre>5.更新 key 以强制重新渲染组件<pre><code>这是强制 Vue重新渲染组件的最佳方式我们可以采用这种将 key分配给子组件的策略,但每次想重新渲染组件时,只需更新该 key 即可。</code></pre>如下案例:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">exprot <span class="keyword">default</span>&#123;</span><br><span class="line"> <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">numberkey</span>:<span class="number">0</span>,</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">methods</span>:&#123;</span><br><span class="line">   <span class="title function_">chenRender</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">numberkey</span> +=<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>每次 chenRender被调用时,我们的 numberkey都会发生改变。当这种情况发生时,Vue将知道它必须销毁组件并创建]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue周期函数运行顺序</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近有看到一个问题说：vue中computed、watch、updated谁先执行？因为之前没有注意过执行顺序，今天特地研究了一下。希望研究结果能给各位小伙伴做个参考！话不多说，先上代码：<br>1、template中的html结构如下，这是一个子组件，父组件用props传过来一个secondNum值，子组件自己有一个firstNum值，有一个按钮，用来改变firstNum值</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>父组件传值secondNum：&#123;&#123; secondNum &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>自己的值firstNum：&#123;&#123; firstNum &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>computed之thirdNum:&#123;&#123; thirdNum &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>改变firstNum<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、js代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;secondNum&#x27;</span>], <span class="comment">//父组件传过来的值，默认为0</span></span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">firstNum</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    thirdNum () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;computed&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstNum</span> + <span class="variable language_">this</span>.<span class="property">secondNum</span> + <span class="string">&#x27;元&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    firstNum (val) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watch&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  updated () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    btnClick () &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">firstNum</span> = <span class="string">&#x27;firstNum&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">999</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;methods&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首次加载效果如下：</p><p>3、在生命周期内修改data中的数据，比如，在mounted里更改firstNum的值时</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstNum</span> = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>4、点击button按钮，改变firstNum时：</p><p>由此得出以下结论：<br>（1）在created时，已经可以使用用data和prop中的数据了<br>（2）页面首次加载时，computed会执行一次，并且是在beforeMount之后，mounted之前<br>（3）在页面数据发生变化时</p><p>如果不是由点击事件造成的数据变化，执行顺序为：<code>watch——beforeUpdate——computed——updated</code><br>如果是由点击事件造成的数据变化，执行顺序为：<code>methods——watch——beforeUpdate——computed——updated</code></p><p>5、computed、watch、methods的区别？</p><p>computed和watch，只有依赖和监听的值发生了变化，才会调用相关属性和函数，而methods中，不管数据有没有变化，只要触发事件，就会调用函数<br>computed和watch，computed具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数;watch无缓存性，页面重新渲染时值不变化也会执行</p><p>6、 怎么合理的监听v-model的值</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>js部分</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">newText</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">text</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">newText</span>: &#123;</span><br><span class="line">      <span class="attr">handler</span>: <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">text</span> = n &gt; <span class="number">0</span> ? <span class="attr">n</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以有效地处理text的值。但又不会出现无限递归</p>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript字符串转数字的5种方法及其陷阱</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/JavaScript%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E5%AD%97%E7%9A%845%E7%A7%8D%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B6%E9%99%B7%E9%98%B1/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/JavaScript%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E5%AD%97%E7%9A%845%E7%A7%8D%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B6%E9%99%B7%E9%98%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>摘要 ：JavaScript 是一个神奇的语言，字符串转数字有 5 种方法，各有各的坑法!</p><p>原文: Converting Strings to Number in Javascript: Pitfalls<br>译者: Fundebug<br>本文采用意译，版权归原作者所有</p><p>String 转换为 Number 有很多种方式，我可以想到的有 5 种！</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(num); <span class="comment">// 默认方式 (没有基数)</span></span><br><span class="line"><span class="built_in">parseInt</span>(num, <span class="number">10</span>); <span class="comment">// 传入基数 (十位数)</span></span><br><span class="line"><span class="built_in">parseFloat</span>(num); <span class="comment">// 浮点数</span></span><br><span class="line"><span class="title class_">Number</span>(num); <span class="comment">// Number 构造器</span></span><br><span class="line">~~num; <span class="comment">//按位非</span></span><br><span class="line">num / <span class="number">1</span>; <span class="comment">// 除一个数</span></span><br><span class="line">num * <span class="number">1</span>; <span class="comment">// 乘一个数</span></span><br><span class="line">num -</span><br><span class="line"><span class="number">0</span> + <span class="comment">// 减去0</span></span><br><span class="line">    num; <span class="comment">// 一元运算符 &quot;+&quot;</span></span><br></pre></td></tr></table></figure><p>选择哪一种呢？什么时候选择它？为什么选择这种它？我们逐一进行分析，并解析每种方式的常见陷阱。</p><ol><li><strong>parseInt</strong><br>根据 JsPerf.com 的基准测试，大多数浏览器对 parseInt 的响应最佳。虽然它是最快的方式，但使用 preseInt 会碰到一些常见陷阱：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;08&quot;</span>); <span class="comment">// returns 0 部分老浏览器.</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;44.jpg&quot;</span>); <span class="comment">// returns 44</span></span><br><span class="line"><span class="attr">parseInt</span>: 没有传入基数时，默认是传入的基数为 <span class="number">10</span> <span class="built_in">parseInt</span>(num, <span class="number">10</span>)，如果你不知道 num 属性的类型，不要使用 <span class="built_in">parseInt</span> 进行字符串转数字。</span><br></pre></td></tr></table></figure></li><li><strong>parseFloat</strong><br>如果你不解析 16 进制数，这是一个非常好的选择。例如：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(-<span class="number">0xff</span>); <span class="comment">// returns -255</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;-0xFF&quot;</span>); <span class="comment">// returns -255</span></span><br><span class="line"><span class="built_in">parseFloat</span>(-<span class="number">0xff</span>); <span class="comment">// returns -255</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;-0xFF&quot;</span>); <span class="comment">// returns 0</span></span><br></pre></td></tr></table></figure>注意：字符串中的负十六进制数字是一个特殊情况，如果你用 parseFloat 解析，结果是不正确的。为了避免程序出现 NaN 的情况，应该检查转化后的值。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;44.jpg&quot;</span>); <span class="comment">// return 44</span></span><br><span class="line"><span class="attr">parseFloat</span>: 转换十六进制数时要小心，如果你不知道要转换对象的类型，不要使用 <span class="built_in">parseFloat</span>。</span><br></pre></td></tr></table></figure></li><li><strong>按位非</strong><br>可以把字符串转换成整数，但他不是浮点数。如果是一个字符串转换，它将返回 0；<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">~~<span class="number">1.23</span>; <span class="comment">// returns 1</span></span><br><span class="line">~~<span class="string">&quot;1.23&quot;</span>; <span class="comment">// returns 1</span></span><br><span class="line">~~<span class="string">&quot;23&quot;</span>; <span class="comment">// returns 23</span></span><br><span class="line">~~<span class="string">&quot;Hello world&quot;</span>; <span class="comment">// returns 0</span></span><br></pre></td></tr></table></figure>这是什么原理？通过翻转&gt;)每个位，也称为数字的 A1 补码。你可以使用它，但注意只能用来存储整数。所以通常情况不要用它，除非你能确定这个数是在 32 位整数之间的值（因为调用的 ToInt32 的规范）。</li></ol><p>按位非：用它确保输入中没有字符，仅用于整数。</p><ol start="4"><li><strong>Number</strong><br>Number 与以上提及的转换方式一样存在这样的问题，解析时试图找出你给他的数字：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&quot;023&quot;</span>); <span class="comment">// returns 23</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="number">023</span>); <span class="comment">// returns 19</span></span><br></pre></td></tr></table></figure>注意：023 实际上是一个八进制数，无论你怎么做，都是返回 19；对于没有单引号或双引号的十六进制数一样。</li></ol><p>Number 也是 JsPerf 中最慢的之一。</p><p>Number：几乎不用它。</p><ol start="5"><li><strong>一元运算符</strong><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;1.23&quot;</span> * <span class="number">1</span>; <span class="comment">// returns 1.23</span></span><br><span class="line"><span class="string">&quot;0xFF&quot;</span> - <span class="number">0</span>; <span class="comment">// returns 255</span></span><br><span class="line"><span class="string">&quot;0xFF.jpg&quot;</span> / <span class="number">1</span> + <span class="comment">// returns NaN</span></span><br><span class="line">    <span class="string">&quot;023&quot;</span>; <span class="comment">// returns 23</span></span><br></pre></td></tr></table></figure>一元运算符与其它的解析方式不同，如果是一个 NaN 值，那么返回的也是 NaN 。这是我最喜欢的数值转换方式，因为我认为任何带有字符的对象都不应该被视为 0 或者根据他有多少位来“猜”。我基本使用 + 操作符，因为这个方式不容易混淆。虽然 -0 的用法也很好，但它并没有很好的表达转换为数字的本意。</li></ol><p>字符串转换为数字的方式总结<br>负十六进制数字符串转换为数字时。应首先将任何其转换为 String（例如通过 + “” ），然后使用一元运算符或带基数的 parseInt 解析为数字。但是结果不是 NaN 的数值时，使用 parseFloat 更为合适。</p>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux配置gitee的ssh</title>
      <link href="/2022/07/30/%E7%B3%BB%E7%BB%9F%E7%AF%87/Linux%E9%85%8D%E7%BD%AEgitee%E7%9A%84ssh/"/>
      <url>/2022/07/30/%E7%B3%BB%E7%BB%9F%E7%AF%87/Linux%E9%85%8D%E7%BD%AEgitee%E7%9A%84ssh/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Gitee 提供了基于SSH协议的Git服务，在使用SSH协议访问仓库之前，需要先配置好账户&#x2F;仓库的SSH公钥。</p><p>你可以按如下命令来生成 sshkey:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;xxxxx@xxxxx.com&quot;</span>  </span><br><span class="line"><span class="comment"># Generating public/private ed25519 key pair...</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：这里的 <a href="mailto:&#x78;&#x78;&#x78;&#120;&#120;&#64;&#x78;&#120;&#120;&#x78;&#120;&#x2e;&#99;&#x6f;&#109;">&#x78;&#x78;&#x78;&#120;&#120;&#64;&#x78;&#120;&#120;&#x78;&#120;&#x2e;&#99;&#x6f;&#109;</a> 只是生成的 sshkey 的名称，并不约束或要求具体命名为某个邮箱。<br>现网的大部分教程均讲解的使用邮箱生成，其一开始的初衷仅仅是为了便于辨识所以使用了邮箱。</p></blockquote><p>按照提示完成三次回车，即可生成 ssh key。通过查看 ~&#x2F;.ssh&#x2F;id_ed25519.pub 文件内容，获取到你的 public key</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_ed25519.pub</span><br><span class="line"><span class="comment"># ssh-ed25519 AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....</span></span><br></pre></td></tr></table></figure><p><a href="http://www.ws865.com/wp-content/uploads/2022/03/676dd7f4d9cb1b9.png"><img src="http://www.ws865.com/wp-content/uploads/2022/03/676dd7f4d9cb1b9-1024x614.png" alt="ssh生成"></a></p><p><a href="http://www.ws865.com/wp-content/uploads/2022/03/10ea593baf29e6c.png"><img src="http://www.ws865.com/wp-content/uploads/2022/03/10ea593baf29e6c-1024x392.png" alt="公钥"></a></p><p>复制生成后的 ssh key，通过仓库主页 <strong>「管理」-&gt;「部署公钥管理」-&gt;「添加部署公钥」</strong> ，添加生成的 public key 添加到仓库中。</p><p>添加部署公钥</p><p>添加后，在终端（Terminal）中输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><p>首次使用需要确认并添加主机到本机SSH可信列表。若返回<code>Hi XXX! You&#39;ve successfully authenticated, but Gitee.com does not provide shell access.</code>内容，则证明添加成功。<br>如果连接超时，检查是不是修改了ssh的端口号。如果修改了ssh的端口号，ssh会默认使用修改后的端口访问<br><a href="http://www.ws865.com/wp-content/uploads/2022/03/44ebe5c05cb1aed.png"><img src="http://www.ws865.com/wp-content/uploads/2022/03/44ebe5c05cb1aed.png" alt="连接超时"></a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -v git@gitee.com</span><br><span class="line"><span class="comment"># connecting timed out</span></span><br></pre></td></tr></table></figure><p>在<code>~/.ssh/</code>目录中添加config文件,在里面配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hostname gitee.com </span><br><span class="line">Port [你的端口]`</span><br></pre></td></tr></table></figure><p>或者在<code>/etc/ssh/ssh_config</code>中将 <code>Port 22</code>打开，这是访问外部时的端口号<br><code>/etc/ssh/sshd_config</code>中的<code>Port 224</code>这是访问机器的端口号<br>然后重启ssh服务<code>service restart ssh</code></p><p>添加成功后，就可以使用SSH协议对仓库进行操作了。</p><p><strong>切记，如果在此之前就添加了http的地址，请先删除远程地址，改用ssh地址</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决canvas无法toDataURL</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/%E8%A7%A3%E5%86%B3canvas%E6%97%A0%E6%B3%95toDataURL/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/%E8%A7%A3%E5%86%B3canvas%E6%97%A0%E6%B3%95toDataURL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于跨域， 画布被污染，不能调用 <code>toBlob()</code>, <code>toDataURL()</code> 或<code>getImageData()</code> 方法，调用它们会抛出安全错误。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DOMException: Failed to execute &#x27;toDataURL&#x27; on &#x27;HTMLCanvasElement&#x27;: Tainted canvases may not be exported.</span><br></pre></td></tr></table></figure><p>首先给img元素添加<code>crossOrigin</code>属性，图片本身的<code>crossOrigin</code>值为<code>default</code></p><p> crossOrigin&#x2F;CORS    | 同域    | 跨域无 CORS    | 跨域有 CORS<br> default    | 支持    | 支持渲染，不支持 toDataURL    | 支持渲染，不支持 toDataURL<br> anonymous    | N&#x2F;A    | 同上    | 支持渲染，支持 toDataURL<br> use-credentials | N&#x2F;A    | 同上    | 支持渲染，不支持 toDataURL</p><p>此时可以解决<code>canvas</code>无法使用<code>toDataURL</code>的问题，但是设置了<code>crossorigin</code>属性，图片就无法加载</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access to image at &#x27;http://xxx.jpg&#x27; from origin &#x27;http://localhost:3001&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is   present on the    requested resource.</span><br></pre></td></tr></table></figure><p>解决办法，给图片URL链接加一个参数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">createImg</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">let</span> imgDom = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">    imgDom.<span class="property">src</span> = <span class="variable language_">this</span>.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">    imgDom.<span class="title function_">setAttribute</span>(<span class="string">&quot;crossOrigin&quot;</span>,<span class="string">&#x27;Anonymous&#x27;</span>)</span><br><span class="line">    imgDom.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(imgDom)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>html2canvas</code>有一些问题，开启<code>allowTaind</code>会导致跨域的问题，需要配置nginx,不如使用<code>dom-to-image</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">img.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> f = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;domf&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    domtoimage.<span class="title function_">toPng</span>(f,options)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result: &#x27;</span>, result) <span class="comment">// 返回base64</span></span><br><span class="line">        <span class="title function_">resolve</span>(result)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err: &#x27;</span>, err)</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>dom-to-image</code>时需要注意给图片属性加上<code>&quot;crossOrigin&quot;:&#39;Anonymous&#39;</code>,可解决无法跨域渲染的问题，同时需要给图片链接拼接上<code>new Date().getTime()</code>解决图片加载跨域的问题</p><blockquote><p>对于<code>dom-to-image</code>不支持js创建的<code>DOM</code>，一定要渲染后的dom，否则返回的是<code>null</code><br><del>同时也不支持图片叠加，只显示最外层图片</del></p></blockquote><p><code>domtoimage</code><strong>相当于截图，一定要先等dom渲染完成之后再去使用，其中图片一定要先加载完成，因此给img添加display或者visibility都将转换失败</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  newDiv.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&#x27;width: 320px;height: 320px;position:relative&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> newImg = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">  newImg.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&#x27;width: 100%;object-fit: fill;position: absolute;left: 0;top: 0;&#x27;</span></span><br><span class="line">  newImg.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="variable language_">this</span>.<span class="property">url1</span> + <span class="string">&#x27;?&#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>())</span><br><span class="line">  newImg.<span class="title function_">setAttribute</span>(<span class="string">&#x27;crossorigin&#x27;</span>,<span class="string">&#x27;Anonymous&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> newImg2 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">  newImg2.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&#x27;width: 100%;object-fit: fill;position: absolute;left: 0;top: 0;&#x27;</span></span><br><span class="line">  newImg2.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="variable language_">this</span>.<span class="property">url2</span>  + <span class="string">&#x27;?&#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>())</span><br><span class="line">  newImg2.<span class="title function_">setAttribute</span>(<span class="string">&#x27;crossorigin&#x27;</span>,<span class="string">&#x27;Anonymous&#x27;</span>)</span><br><span class="line">  newDiv.<span class="title function_">append</span>(newImg)</span><br><span class="line">  newDiv.<span class="title function_">append</span>(newImg2)</span><br><span class="line"><span class="comment">// 等待两张图片加载完成</span></span><br><span class="line">  <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">loaded</span>(newImg)</span><br><span class="line">  <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">loaded</span>(newImg2)</span><br><span class="line"><span class="comment">// 渲染Dom</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">domf</span>.<span class="title function_">append</span>(newDiv)</span><br><span class="line"><span class="comment">// 最后去转换成图片</span></span><br><span class="line">  domtoimage.<span class="title function_">toPng</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">domf</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newImg = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">    newImg.<span class="property">src</span> = result</span><br><span class="line">    newImg.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">domf</span>.<span class="title function_">append</span>(newImg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载图片</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">loaded</span>(<span class="params">dom</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">      dom.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="literal">true</span>)</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信分享图文链接</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E5%9B%BE%E6%96%87%E9%93%BE%E6%8E%A5/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E5%9B%BE%E6%96%87%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>新建H5页面，给H5页面授权<br><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">网页授权文档</a></li></ol><p><a href="http://www.ws865.com/wp-content/uploads/2022/03/afc228ce914bfb8.png"><img src="http://www.ws865.com/wp-content/uploads/2022/03/afc228ce914bfb8.png"></a><br>2. 使用微信JS-SDK配置给H5页面注入权限<br><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign">#### 微信 JS 接口签名校验工具</a>用来测试签名是否正确</p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html">JS-SDK使用文档</a><br>代码如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">debug</span>: <span class="literal">false</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">  <span class="attr">appId</span>: <span class="string">&#x27;wx5*****4cac9e&#x27;</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">  <span class="attr">timestamp</span>: <span class="number">1648093192</span>, <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">  <span class="attr">nonceStr</span>: <span class="string">&#x27;1648093192&#x27;</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">  <span class="attr">signature</span>: <span class="string">&#x27;04bb225123************167d41bd291&#x27;</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">  <span class="attr">jsApiList</span>: [</span><br><span class="line">    <span class="string">&#x27;onMenuShareAppMessage&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;onMenuShareTimeline&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;updateAppMessageShareData&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;updateTimelineShareData&#x27;</span> ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可用户授权获取openID</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> currentUrl = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span></span><br><span class="line"> <span class="keyword">const</span> isCallback = <span class="regexp">/^code=/</span>.<span class="title function_">test</span>(currentUrl.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line"> <span class="keyword">if</span> (!isCallback) &#123;</span><br><span class="line"> <span class="keyword">const</span> redirect_uri = <span class="string">&#x27;http://demo.ws865.com/&#x27;</span></span><br><span class="line"> location.<span class="property">href</span>=<span class="string">`https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx537a6791a14cac9e&amp;redirect_uri=<span class="subst">$&#123;redirect_uri&#125;</span>&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect`</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">const</span> code = currentUrl.<span class="title function_">match</span>(<span class="regexp">/code=.*&amp;state/g</span>)[<span class="number">0</span>].<span class="title function_">replace</span>(<span class="string">&#x27;code=&#x27;</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&amp;state&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;========&#x27;</span>,code)</span><br></pre></td></tr></table></figure><p>可使用微信开发者工具开发H5页面, 配置成功后可添加自定义分享代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">      wx.<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;   <span class="comment">//需在用户可能点击分享按钮前就先调用</span></span><br><span class="line">    wx.<span class="title function_">updateAppMessageShareData</span>(&#123; </span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;这是一个PDF&#x27;</span>, <span class="comment">// 分享标题</span></span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&#x27;3.2M&#x27;</span>, <span class="comment">// 分享描述</span></span><br><span class="line">      <span class="attr">link</span>: <span class="string">&#x27;http://demo.******.com/&#x27;</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">      <span class="attr">imgUrl</span>: <span class="string">&#x27;https://vkceyugu.cdn.bspapp.com/VKCEYUGU-8dc116bd-312c-4e61-82b1-4774a3d57966/d89a47b2-3dfb-44dd-928c-052761d9c127.jpg&#x27;</span>, <span class="comment">// 分享图标</span></span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 设置成功</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    wx.<span class="title function_">updateTimelineShareData</span>(&#123; </span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;这是一个PDF&#x27;</span>, <span class="comment">// 分享标题</span></span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&#x27;3.2M&#x27;</span>, <span class="comment">// 分享描述</span></span><br><span class="line">      <span class="attr">link</span>: <span class="string">&#x27;http://demo.*****.com/&#x27;</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">      <span class="attr">imgUrl</span>: <span class="string">&#x27;https://vkceyugu.cdn.bspapp.com/VKCEYUGU-8dc116bd-312c-4e61-82b1-4774a3d57966/d89a47b2-3dfb-44dd-928c-052761d9c127.jpg&#x27;</span>, <span class="comment">// 分享图标</span></span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 设置成功</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">  wx.<span class="title function_">error</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line"><span class="comment">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fail&#x27;</span>, res)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>将H5页面放置服务器，并在公众号配置服务器的白名单，并配置公众号JS安全域名<br><a href="http://www.ws865.com/wp-content/uploads/2022/03/ad57484016654da.png"><img src="http://www.ws865.com/wp-content/uploads/2022/03/ad57484016654da-1024x315.png"></a></p></li><li><p>实现分享<br>在微信端输入H5链接，然后收藏，再在收藏里面分享链接，即可</p></li></ol><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><ol><li><code># wx.config &#123;&quot;errMsg&quot;: &quot;config:invalid signature&quot;&#125; ?</code><br>使用js签名校验工具检测签名是否有问题，如果签名一致，则去检查公众号配置的ip白名单是否添加<br>页面授权域名，和jsAPI域名是否和wx.config配置的一致<br><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#%E9%99%84%E5%BD%951-JS-SDK%E4%BD%BF%E7%94%A8%E6%9D%83%E9%99%90%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95">参考文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯前端下载Excel文件</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E7%BA%AF%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BDExcel%E6%96%87%E4%BB%B6/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E7%BA%AF%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BDExcel%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>项目需求，下载一个Excel文件，我把文件放在了代码里，加个按钮点击就可下载，因为就一个很小的文件，没必要让后端做，目前最简单的方法就是用<code>a</code> 标签</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;文件地址xxx.xlsx&quot; download=&quot;文件名.xlsx&quot;&gt;</span><br></pre></td></tr></table></figure><p>加 download 属性是因为有个情况，比如<code>txt</code>,<code>png</code>,<code>jpg</code>等这些浏览器支持直接打开的文件是不会执行下载任务的，而是会直接打开文件，这个时候就需要给a标签添加一个属性<code>“download”</code>;</p><p>最最关键的地方来了：文件放的位置和文件的地址这两是最大的坑。</p><p>一、文件放的位置：</p><p>我们在写vue的时候，代码都在 src 文件夹里面，但是要下载的文件不能放在这里面，要放在同级的静态文件夹下，如 public 文件夹</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db82f5f4c3a74039a9bd72b89528b5ca~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp"></p><p>别人的文章里写的是 <code>static</code> 文件夹，但是我的没生效，不知道什么原因。</p><p>二、文件地址的引用：</p><p>需要下载的路径是相对于<code>index.html</code>文件路径 否则会提示下载文件未找到。</p><p>上面这句话里：路径是相对于 <code>index.html</code> 的文件路径，一开始没搞懂，写的路径都是我的代码的相对路径，如：<code>../../../public/xxx.xlsx</code>。 后来才发现这不是相对于 index.html 的路径，</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/826e2cdfc8954b3d994c91af1bda56ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp"></p><p>这是我的代码，这才发现文件和 <code>index.html</code> 同级，所以引用路径直接就是：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">href=<span class="string">&quot;./用户信息模板.xlsx&quot;</span></span><br></pre></td></tr></table></figure><p>这两个坑过去了，可以正常下载文件了。</p><p>至于文件路径和 <code>download</code> 的文件名存在中文会出错我这里没问题，不知道你们的会不会，这也是需要考虑的问题。</p><blockquote><p>作者：Front_end_er<br>链接：<a href="https://juejin.cn/post/6857730119583629325">https://juejin.cn/post/6857730119583629325</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vite环境之配置环境变量</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/Vite%E7%8E%AF%E5%A2%83%E4%B9%8B%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/Vite%E7%8E%AF%E5%A2%83%E4%B9%8B%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>在根目录新建<code>.env.[mode]</code>文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.env                # 所有情况下都会加载</span><br><span class="line">.env.local          # 所有情况下都会加载，但会被 git 忽略</span><br><span class="line">.env.[mode]         # 只在指定模式下加载</span><br><span class="line">.env.[mode].local   # 只在指定模式下加载，但会被 git 忽略</span><br></pre></td></tr></table></figure><p>加载的环境变量也会通过 import.meta.env 暴露给客户端源码。<br><code>import.meta.env</code>的值为</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">BASE_URL</span>: <span class="string">&quot;/&quot;</span></span><br><span class="line">  <span class="attr">DEV</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">MODE</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">  <span class="attr">PROD</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">SSR</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">VITE_BASE_URL</span>: <span class="string">&quot;http://localhost:3010&quot;</span> <span class="comment">// 配置了模式文件之后，vite会将所有有效变量添加到env中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了防止意外地将一些环境变量泄漏到客户端，只有以 VITE_ 为前缀的变量才会暴露给经过 vite 处理的代码。例如下面这个文件中：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DB_PASSWORD=foobar</span><br><span class="line">VITE_SOME_KEY=123</span><br></pre></td></tr></table></figure><p>只有 VITE_SOME_KEY 会被暴露为<code> import.meta.env.VITE_SOME_KEY</code> 提供给客户端源码，而 <code>DB_PASSWORD</code> 则不会。</p><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p>默认情况下，开发服务器 (dev 命令) 运行在 development (开发) 模式，而 build 命令则运行在 production (生产) 模式。</p><p>这意味着当执行 vite build 时，它会自动加载 .env.production 中可能存在的环境变量：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># .env.production</span><br><span class="line">VITE_APP_TITLE=My App  // 等号左右不要空白</span><br></pre></td></tr></table></figure><p>在你的应用中，你可以使用 <code>import.meta.env.VITE_APP_TITLE</code> 渲染标题。</p><p>然而，重要的是要理解 <strong>模式</strong> 是一个更广泛的概念，而不仅仅是开发和生产。一个典型的例子是，你可能希望有一个 “staging” (预发布|预上线) 模式，它应该具有类似于生产的行为，但环境变量与生产环境略有不同。</p><p>你可以通过传递 <code>--mode</code> 选项标志来覆盖命令使用的默认模式。例如，如果你想为我们假设的 staging 模式构建应用：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vite build --mode staging</span><br></pre></td></tr></table></figure><p>为了使应用实现预期行为，我们还需要一个 <code>.env.staging</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># .env.staging</span><br><span class="line">NODE_ENV=production</span><br><span class="line">VITE_APP_TITLE=My App (staging)</span><br></pre></td></tr></table></figure><p>现在，你的 staging 应用应该具有类似于生产的行为，但显示的标题与生产环境不同。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS之正则匹配RegExp</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/JS%E4%B9%8B%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8DRegExp/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/JS%E4%B9%8B%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8DRegExp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="使用的方法"><a href="#使用的方法" class="headerlink" title="使用的方法"></a>使用的方法</h3><p>使用正则表达式的方法</p><p><code>exec</code> 一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">str = <span class="string">&#x27;get hello world&#x27;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/get/g</span></span><br><span class="line"><span class="keyword">let</span> r = reg.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r); <span class="comment">// [ &#x27;get&#x27;, index: 0, input: &#x27;get hello world&#x27;, groups: undefined ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>test</code> 一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。<br><code>match</code> 一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。<br><code>matchAll</code> 一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。<br><code>search</code> 一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。<br><code>replace</code> 一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。<br><code>split</code> 一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。</p>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单向数据流和双向数据流</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81%E5%92%8C%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81%E5%92%8C%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>数据流，表明的是数据流向或数据传递。</p><h2 id="一、单向数据流"><a href="#一、单向数据流" class="headerlink" title="一、单向数据流"></a>一、单向数据流</h2><h3 id="1-什么是单向数据流？"><a href="#1-什么是单向数据流？" class="headerlink" title="1. 什么是单向数据流？"></a>1. 什么是单向数据流？</h3><p>单向数据流（Unidirectional data flow）方式使用一个上传数据流和一个下传数据流进行双向数据通信，两个数据流之间相互独立。单向数据流指只能从一个方向来修改状态。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/edc419b4e49842a49cef1b1681a34854~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><h3 id="2-Vue-中的单向数据流"><a href="#2-Vue-中的单向数据流" class="headerlink" title="2. Vue 中的单向数据流"></a>2. Vue 中的单向数据流</h3><p>对于 Vue 来说，组件之间的数据传递具有单向数据流这样的特性。</p><ol><li>父组件总是通过 props 向子组件传递数据；</li><li>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定；</li><li>父级 prop 的更新会向下流动到子组件中，但是反过来则不行；</li><li>这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解；</li><li>每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值；</li><li>这意味着不应该在一个子组件内部改变 prop。如果这样做，Vue 会在浏览器的控制台中发出警告。</li></ol><h3 id="3-单向数据流-优点"><a href="#3-单向数据流-优点" class="headerlink" title="3. 单向数据流 - 优点"></a>3. 单向数据流 - 优点</h3><ol><li>所有状态的改变可记录、可跟踪，源头易追溯；</li><li>所有的数据，具有唯一出口和入口，使得数据操作更直观更容易理解，可维护性强；</li><li>当数据变化时，页面会自动变化</li><li>当你需要修改状态，完全重新开始走一个修改的流程。这限制了状态修改的方式，让状态变得可预测，容易调试。</li></ol><h3 id="4-单向数据流-缺点"><a href="#4-单向数据流-缺点" class="headerlink" title="4. 单向数据流 - 缺点"></a>4. 单向数据流 - 缺点</h3><ol><li>页面渲染完成后，有新数据不能自动更新，需要手动整合新数据和模板重新渲染</li><li>代码量上升，数据流转过程变长，代码重复性变大</li><li>由于对应用状态独立管理的严格要求(单一的全局 store，如：Vuex)，在处理局部状态较多的场景时(如用户输入交互较多的“富表单型”应用)，会显得啰嗦及繁琐。</li></ol><h2 id="二、双向数据流"><a href="#二、双向数据流" class="headerlink" title="二、双向数据流"></a>二、双向数据流</h2><h3 id="1-什么是双向数据流？"><a href="#1-什么是双向数据流？" class="headerlink" title="1. 什么是双向数据流？"></a>1. 什么是双向数据流？</h3><p>在双向数据流中，Model（可以理解为状态的集合） 中可以修改自己或其他Model的状态， 用户的操作（如在输入框中输入内容）也可以修改状态。（双向数据流也可以叫双向数据绑定）</p><hr><p>当我们在前端开发中采用 <code>MV*</code> 的模式时，<code>M - model</code>，指的是模型，也就是数据，<code>V - view</code>，指的是视图，也就是页面展现的部分。</p><hr><p>将从服务器获取的数据进行“渲染”，展现到视图上。每当数据有变更时，我们会再次进行渲染，从而更新视图，使得视图与数据保持一致</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6022bab6df5a45b695c431e0cdd0ffea~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><hr><p>页面也会通过用户的交互，产生状态、数据的变化，这个时候，我们则编写代码，将视图对数据的更新同步到数据</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cdbd1d1278149fd94ad5de91d4ecae2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><hr><h3 id="2-双向数据流-优点"><a href="#2-双向数据流-优点" class="headerlink" title="2. 双向数据流 - 优点"></a>2. 双向数据流 - 优点</h3><ol><li>数据模型变化与更新，会自动同步到页面上，用户在页面的数据操作，也会自动同步到数据模型</li><li>无需进行和单向数据绑定的那些相关操作；</li><li>在表单交互较多的场景下，会简化大量业务无关的代码。</li></ol><h3 id="3-双向数据流-缺点"><a href="#3-双向数据流-缺点" class="headerlink" title="3. 双向数据流 - 缺点"></a>3. 双向数据流 - 缺点</h3><ol><li>无法追踪局部状态的变化；</li><li>“暗箱操作”，增加了出错时 debug 的难度；</li><li>由于组件数据变化来源入口变得可能不止一个，数据流转方向易紊乱。</li><li>改变一个状态有可能会触发一连串的状态的变化，最后很难预测最终的状态是什么样的。使得代码变得很难调试</li></ol><p>作者：lubinbin<br>链接：<a href="https://juejin.cn/post/6999826653803184135">https://juejin.cn/post/6999826653803184135</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>adb报错文档</title>
      <link href="/2022/07/30/%E5%B7%A5%E5%85%B7%E7%AF%87/adb%E6%8A%A5%E9%94%99%E6%96%87%E6%A1%A3/"/>
      <url>/2022/07/30/%E5%B7%A5%E5%85%B7%E7%AF%87/adb%E6%8A%A5%E9%94%99%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul><li>安卓系统未打开adb网络调试功能</li><li>通过USB方式连接到安卓系统设置即可</li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>先通过USB线连接</li><li><code>adb devices</code> 能看到所连接的设备情况下</li><li><code>adb root</code> 权限提权(如果已经root可以无视)</li><li><code>adb shell</code> 进入到安卓系统的shell<ul><li><code>setprop service.adb.tcp.port 5555</code> 设置adb服务端口为5555， 打开adb网络调试功能</li><li><code>exit</code> 退出shell</li></ul></li><li><code>adb tcpip 5555</code></li><li>拔掉USB线</li><li><code>adb connect x.x.x.x:x</code>连接即可</li></ul><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><ol><li>在android 10情况下，<code>adb root</code>失败</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb root</span><br><span class="line">// adbd cannot run as root in production builds</span><br></pre></td></tr></table></figure><p>解决方案： <a href="https://github.com/evdenis/adb_root">https://github.com/evdenis/adb_root</a><br>Android 9&#x2F;10 only. Will not work on Android 11.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ADB命令</title>
      <link href="/2022/07/30/%E5%B7%A5%E5%85%B7%E7%AF%87/ADB%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/07/30/%E5%B7%A5%E5%85%B7%E7%AF%87/ADB%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>常用命令用于速查，都是经常需要用到的，没有接触过adb命令从第二节开始看，对每个命令有详细解释。</p><h2 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1. 常用命令"></a>1. 常用命令</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">adb devices #查看连接设备</span><br><span class="line"></span><br><span class="line">adb -s cf27456f shell # 指定连接设备使用命令</span><br><span class="line"></span><br><span class="line">adb install test.apk # 安装应用</span><br><span class="line"></span><br><span class="line">adb install -r demo.apk #安装apk 到sd 卡：</span><br><span class="line"></span><br><span class="line">adb uninstall cn.com.test.mobile #卸载应用，需要指定包</span><br><span class="line"></span><br><span class="line">adb uninstall -k cn.com.test.mobile #卸载app 但保留数据和缓存文件</span><br><span class="line"></span><br><span class="line">adb shell pm list packages #列出手机装的所有app 的包名</span><br><span class="line"></span><br><span class="line">adb shell pm list packages -3 #列出除了系统应用的第三方应用包名</span><br><span class="line"></span><br><span class="line">adb shell pm clear cn.com.test.mobile #清除应用数据与缓存</span><br><span class="line"></span><br><span class="line">adb shell am start -ncn.com.test.mobile/.ui.SplashActivity #启动应用</span><br><span class="line"></span><br><span class="line">adb shell dumpsys package #包信息Package Information</span><br><span class="line"></span><br><span class="line">adb shell dumpsys meminfo #内存使用情况Memory Usage</span><br><span class="line"></span><br><span class="line">adb shell am force-stop cn.com.test.mobile #强制停止应用</span><br><span class="line"></span><br><span class="line">adb logcat #查看日志</span><br><span class="line"></span><br><span class="line">adb logcat -c #清除log 缓存</span><br><span class="line"></span><br><span class="line">adb reboot #重启</span><br><span class="line"></span><br><span class="line">adb get-serialno #获取序列号</span><br><span class="line"></span><br><span class="line">adb shell getprop ro.build.version.release #查看Android 系统版本</span><br><span class="line"></span><br><span class="line">adb shell top -s 10 #查看占用内存前10 的app</span><br><span class="line"></span><br><span class="line">adb push &lt;local&gt; &lt;remote&gt; #从本地复制文件到设备</span><br><span class="line"></span><br><span class="line">adb pull &lt;remote&gt; &lt;local&gt; #从设备复制文件到本地</span><br><span class="line"></span><br><span class="line">adb bugreport #查看bug 报告</span><br><span class="line"></span><br><span class="line">adb help #查看ADB 帮助</span><br></pre></td></tr></table></figure><h2 id="2-1-连接设备"><a href="#2-1-连接设备" class="headerlink" title="2.1 连接设备"></a>2.1 连接设备</h2><p><strong>adb [-d|-e|-s <serialNumber>] <command></strong></p><p>连接指定设备</p><p>参数：</p><p>-d 指定当前唯一通过USB 连接的Android 设备为命令目标</p><p>-e 指定当前唯一运行的模拟器为命令目标</p><p>-s <serialNumber> 指定相应serialNumber 号的设备&#x2F;模拟器为命令目标</p><p>command 为所需对设备执行的命令</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> devices</span><br><span class="line">List of devices attached</span><br><span class="line">cf263b7f device</span><br><span class="line">emulator<span class="literal">-5554</span> offline</span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.6</span>:<span class="number">5555</span> device</span><br><span class="line"><span class="variable">$adb</span> <span class="literal">-s</span> cf263b7f <span class="comment">#连接cf264b8f 设备</span></span><br></pre></td></tr></table></figure><p>adb devices 查看已连接的设备信息, 上面已经连接3台设备。</p><h2 id="2-2-查看信息"><a href="#2-2-查看信息" class="headerlink" title="2.2 查看信息"></a>2.2 查看信息</h2><p><strong>2.2.1 查看版本设备</strong></p><p><strong>adb version</strong> 查看adb 版本信息</p><p><strong>adb devices</strong> 查看adb 连接设备</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> devices</span><br><span class="line">List of devices attached</span><br><span class="line"><span class="number">1226959</span>f device</span><br><span class="line"><span class="number">3426422</span>f offline</span><br></pre></td></tr></table></figure><p>注意：offline 表示设备未连接成功或无响应，device 设备已连接</p><p><strong>adb shell getprop ro.product.model</strong> 查看设备型号</p><p><strong>adb get-serialno</strong> 获取设备序列号</p><p><strong>adb bugreport</strong> 查看bug 报告</p><p><strong>adb logcat</strong> 查看日志</p><p><strong>adb shell wm size</strong> 查看屏幕分辨率</p><p><strong>adb shell wm density</strong> 查看屏幕密度</p><p><strong>2.2.2 查看应用信息</strong></p><p><strong>adb shell pm list packages</strong> 列出手机装的所有app 的包名</p><p><strong>adb shell pm list packages -s</strong> 列出系统应用的所有包名</p><p><strong>adb shell pm list packages -3</strong> 列出除了系统应用的第三方应用包名</p><p><strong>adb shell pm list packages | find “test” win</strong> 列出手机装带有的test的包</p><p><strong>adb shell pm list packages | grep ‘test’ linux</strong> 列出手机装带有的test的包</p><p><strong>adb shell cat <em>&#x2F;sys&#x2F;class&#x2F;net&#x2F;wlan0&#x2F;address</em></strong> 获取MAC 地址, 根据系统版本参数可能不同</p><p><strong>adb shell getprop ro.build.version.release</strong> 查看Android 系统版本</p><p><strong>adb shell dumpsys activity services [<packagename>]</strong> 查看正在运行的Services</p><p><packagename> 参数不是必须的，指定<packagename> 表示查看与某个包名相关的Services，不指定表示查看所有Services。</p><p><packagename> 不一定要给出完整的包名，比如运行adb shell dumpsys activity services org.zhihu，那么包名org.zhihu.demo1、org.zhihu.demo2 和org.zhihu 等相关的Services 都会列出来。</p><h2 id="2-3-app-安装和卸载"><a href="#2-3-app-安装和卸载" class="headerlink" title="2.3 app 安装和卸载"></a>2.3 app 安装和卸载</h2><p><strong>2.3.1 app 安装：</strong></p><p><strong>adb install <apkfile></strong> 参数apkfile 为.apk 文件名称</p><p><strong>adb install -r <em>test.apk</em></strong> 保留数据和缓存文件，重新安装apk</p><p><strong>adb install -s <em>test.apk</em></strong> 安装apk 到sd 卡</p><p><strong>2.3.2 app 卸载</strong></p><p><strong>adb uninstall <package></strong> 参数package 为软件包名称</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> uninstall cn.com.test.mobile</span><br><span class="line"> </span><br><span class="line"><span class="comment">#  卸载app 但保留数据和缓存文件</span></span><br><span class="line"><span class="variable">$adb</span> uninstall <span class="literal">-k</span> ccn.com.test.mobile </span><br></pre></td></tr></table></figure><h2 id="2-4-启动停止服务"><a href="#2-4-启动停止服务" class="headerlink" title="2.4 启动停止服务"></a>2.4 启动停止服务</h2><p><strong>adb start-server</strong></p><p>启动adb 服务，基本不会用到，因为只要设备连接正确，会自动启动adb server</p><p><strong>adb kill-server</strong></p><p>停止adb server</p><p><strong>adb -P <port> start-server</strong></p><p>指定adb server 的网络端口port （默认为5037）启动服务</p><h2 id="2-5-与应用交互"><a href="#2-5-与应用交互" class="headerlink" title="2.5 与应用交互"></a>2.5 与应用交互</h2><p><strong>adb shell pm clear <packagename></strong></p><p>清除应用数据与缓存</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell pm <span class="built_in">clear</span> cn.com.test.mobile</span><br></pre></td></tr></table></figure><p><strong>adb shell am force-stop <packagename></strong></p><p>强制停止应用</p><p>示例：强制停止微信</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell am force<span class="literal">-stop</span> com.tencent.mm</span><br></pre></td></tr></table></figure><p><strong>adb shell am <command></strong></p><p>command 命令详解</p><blockquote><p>command 用途<br>start [options] <INTENT> 启动 <INTENT> 指定的 Activity<br>startservice [options] <INTENT> 启动 <INTENT> 指定的 Service<br>broadcast [options] <INTENT> 发送 <INTENT> 指定的广播<br>force-stop <packagename> 停止 <packagename> 相关的进程</p></blockquote><p><INTENT> 参数很灵活，和写 Android 程序时代码里的 Intent 相对应,用于决定 intent 对象的选项如下：</p><blockquote><p>-a <ACTION> 指定 action，如android.intent.action.VIEW<br>-c <CATEGORY> 指定 category，如android.intent.category.APP_CONTACTS<br>-n <COMPONENT> 指定完整 component 名，用于明确指定启动哪个 Activity，如<br><a href="https://link.zhihu.com/?target=http://com.example.app/.ExampleActivity">com.example.app&#x2F;.ExampleActivity</a></p></blockquote><p><strong>2.5.1 启动 Activity</strong></p><p><strong>adb shell am start [options] <INTENT></strong></p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#指定完整 component 名，用于明确指定启动哪个Activity</span></span><br><span class="line"><span class="variable">$adb</span> shell am <span class="built_in">start</span> <span class="literal">-n</span> &lt;COMPONENT&gt;  </span><br><span class="line">如： <span class="comment">#表示调起微信主界面</span></span><br><span class="line"><span class="variable">$adb</span> shell am <span class="built_in">start</span> <span class="literal">-n</span> com.tencent.mm/.ui.LauncherUI  </span><br></pre></td></tr></table></figure><p><strong>2.5.2 启动 Service</strong></p><p><strong>adb shell am startservice [options] <INTENT></strong></p><p>示例： 表示调起微信的某 Service。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell am startservice <span class="literal">-n</span> com.tencent.mm/.plugin.accountsync.model.AccountAuthenticatorService</span><br></pre></td></tr></table></figure><p><strong>2.5.3 发送广播</strong></p><p>可以向所有组件广播，也可以只向指定组件广播。</p><p>adb shell am broadcast [options] <INTENT></p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#向所有组件广播 BOOT_COMPLETED (开机广播)</span></span><br><span class="line"><span class="variable">$adb</span> shell am broadcast <span class="literal">-a</span> android.intent.action.BOOT_COMPLETED   </span><br><span class="line"><span class="comment">#如：只向 org.mazhuang.boottimemeasure/.BootCompletedReceiver 广播 BOOT_COMPLETED：</span></span><br><span class="line"><span class="variable">$adb</span> shell am broadcast <span class="literal">-a</span> android.intent.action.BOOT_COMPLETED <span class="literal">-n</span> org.mazhuang.boottimemeasure/.BootCompletedReceiver</span><br></pre></td></tr></table></figure><p>系统预定义的广播：</p><p><img src="https://pic4.zhimg.com/80/v2-c1eb5c565ef8dbea3610dc7957225917_720w.jpg"></p><p>Android 系统预定义广播</p><p><strong>2.5.4 强制停止应用</strong></p><p><strong>adb shell am force-stop <packagename></strong></p><p><em>示例：</em></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 查询出包名</span></span><br><span class="line"><span class="variable">$adb</span> shell pm list packages </span><br><span class="line">.....</span><br><span class="line"><span class="comment"># 强制停止微信</span></span><br><span class="line"><span class="variable">$adb</span> shell am force<span class="literal">-stop</span> com.tencent.mm</span><br></pre></td></tr></table></figure><h2 id="2-6-文件管理"><a href="#2-6-文件管理" class="headerlink" title="2.6 文件管理"></a><strong>2.6 文件管理</strong></h2><p><strong>2.6.1 复制设备里的文件到电脑</strong></p><p><strong>adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</strong></p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> pull /sdcard/abc.mp4  ~/tmp/</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>小技巧</strong>：设备上的文件路径可能需要 root 权限才能访问，如果你的设备已经 root 过，可以先使用 adb shell 和 su 命令在 adb shell 里获取 root 权限后，先 cp &#x2F;path&#x2F;on&#x2F;device &#x2F;sdcard&#x2F;filename 将文件复制到 sdcard，然后 adb pull &#x2F;sdcard&#x2F;filename &#x2F;path&#x2F;on&#x2F;pc。</em></p></blockquote><p><strong>2.6.2 复制电脑里的文件到设备</strong></p><p><strong>adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</strong></p><p><strong>示例：</strong></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> push  e:/ss.au3  /<span class="keyword">data</span>/local/tmp/</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>小技巧</strong>：设备上的文件路径普通权限可能无法直接写入，如果你的设备已经 root 过，可以先 adb push &#x2F;path&#x2F;on&#x2F;pc &#x2F;sdcard&#x2F;filename，然后 adb shell 和 su 在 adb shell 里获取 root 权限后，cp &#x2F;sdcard&#x2F;filename &#x2F;path&#x2F;on&#x2F;device</em></p></blockquote><h2 id="2-7-使用ADB命令模拟按键-x2F-输入"><a href="#2-7-使用ADB命令模拟按键-x2F-输入" class="headerlink" title="2.7 使用ADB命令模拟按键&#x2F;输入"></a><strong>2.7 使用ADB命令模拟按键&#x2F;输入</strong></h2><p><strong>adb shell input keyevent <keycode></strong></p><p>keycode位操作参数，不同的 keycode 能实现不同的功能</p><p>完整的功能见：<a href="https://link.zhihu.com/?target=https://developer.android.com/reference/android/view/KeyEvent.html">https://developer.android.com/reference/android/view/KeyEvent.html</a></p><p>keycode 能实现不同的功能，对应的编码如下：</p><p><img src="https://pic3.zhimg.com/80/v2-19f07a6dc7f9b589c0ca808be3302e32_720w.jpg"></p><p>keycode 列表</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">26</span>  <span class="comment">#电源键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">82</span>  <span class="comment">#菜单键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">3</span>  <span class="comment">#HOME 键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">4</span> <span class="comment">#返回键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">24</span> <span class="comment">#增加音量</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">25</span> <span class="comment">#降低音量</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">164</span> <span class="comment">#静音</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">85</span>  <span class="comment">#播放/暂停</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">86</span> <span class="comment">#停止播放</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">87</span> <span class="comment">#播放下一首</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">88</span> <span class="comment">#播放上一首</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">126</span> <span class="comment">#恢复播放</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">127</span> <span class="comment">#暂停播放</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">224</span> <span class="comment">#点亮屏幕</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">223</span> <span class="comment">#熄灭屏幕</span></span><br><span class="line"><span class="variable">$adb</span> shell input swipe <span class="number">300</span> <span class="number">1000</span> <span class="number">300</span> <span class="number">500</span>  <span class="comment">#滑动解锁，向上滑动手势解锁</span></span><br><span class="line"><span class="comment">#参数 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标 </span></span><br><span class="line"><span class="variable">$adb</span> shell input text hello <span class="comment">#焦点处于某文本框时输入文本</span></span><br></pre></td></tr></table></figure><h2 id="2-8-查看日志"><a href="#2-8-查看日志" class="headerlink" title="2.8 查看日志"></a><strong>2.8 查看日志</strong></h2><h3 id="2-8-1-Android-日志"><a href="#2-8-1-Android-日志" class="headerlink" title="2.8.1 Android 日志"></a><strong>2.8.1 Android 日志</strong></h3><p><strong>[adb] logcat [<option>] … [<filter-spec>] …</strong></p><p><em><strong>按级别过滤日志</strong></em></p><p>按某级别过滤日志则会将该级别及以上的日志输出，Android 日志的优先级如下：</p><blockquote><p>V —— Verbose（最低，输出得最多）<br>D —— Debug<br>I —— Info<br>W —— Warning<br>E —— Error<br>F —— Fatal<br>S —— Silent（最高，啥也不输出）</p></blockquote><p>示例：输出W之上的日志，W,E,F,S</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat *:W</span><br></pre></td></tr></table></figure><p><em><strong>按 tag 和级别过滤日志</strong></em></p><p><filter-spec> 可以由多个 <tag>[:priority] 组成</p><p>示例：输出 tag ActivityManager 的 I 以上级别日志，输出tag MyApp的D 以上级别日志，及其它 tag 的 S 级别日志（即屏蔽其它 tag 日志）。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat ActivityManager:I MyApp:D *:S</span><br></pre></td></tr></table></figure><p><em><strong>日志格式</strong></em></p><p><strong>adb logcat -v <format></strong></p><p>指定日志输出格式</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> &lt;format&gt;  指定日志输出格式</span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> brief   <span class="comment">#默认格式,&lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> <span class="keyword">process</span> <span class="comment">#&lt;priority&gt;(&lt;pid&gt;) &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> tag  <span class="comment">#&lt;priority&gt;/&lt;tag&gt;: &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> raw  <span class="comment">#&lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> time  <span class="comment">#&lt;datetime&gt; &lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> threadtime <span class="comment">#&lt;datetime&gt; &lt;pid&gt; &lt;tid&gt; &lt;priority&gt; &lt;tag&gt;: &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> long  <span class="comment">#[ &lt;datetime&gt; &lt;pid&gt;:&lt;tid&gt; &lt;priority&gt;/&lt;tag&gt;:] &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> long ActivityManager:I *:S  <span class="comment">#指定格式可与上面的过滤同时使用</span></span><br></pre></td></tr></table></figure><p><em><strong>清空日志</strong></em></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-c</span></span><br></pre></td></tr></table></figure><p><strong>2.8.2 内核日志</strong></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dmesg  </span><br></pre></td></tr></table></figure><p>查看内核日志</p><h2 id="2-9-查看设备信息"><a href="#2-9-查看设备信息" class="headerlink" title="2.9 查看设备信息"></a><strong>2.9 查看设备信息</strong></h2><h3 id="2-9-1-型号"><a href="#2-9-1-型号" class="headerlink" title="2.9.1 型号"></a><strong>2.9.1 型号</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell getprop ro.product.model</span><br></pre></td></tr></table></figure><h3 id="2-9-2-电池状况"><a href="#2-9-2-电池状况" class="headerlink" title="2.9.2 电池状况"></a><strong>2.9.2 电池状况</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dumpsys battery</span><br></pre></td></tr></table></figure><h3 id="2-9-3-屏幕分辨率"><a href="#2-9-3-屏幕分辨率" class="headerlink" title="2.9.3 屏幕分辨率"></a><strong>2.9.3 屏幕分辨率</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell wm size</span><br></pre></td></tr></table></figure><h3 id="2-9-4-屏幕密度"><a href="#2-9-4-屏幕密度" class="headerlink" title="2.9.4 屏幕密度"></a><strong>2.9.4 屏幕密度</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell wm density</span><br></pre></td></tr></table></figure><h3 id="2-9-5-显示屏参数"><a href="#2-9-5-显示屏参数" class="headerlink" title="2.9.5 显示屏参数"></a><strong>2.9.5 显示屏参数</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dumpsys window displays</span><br></pre></td></tr></table></figure><h3 id="2-9-6-android-id"><a href="#2-9-6-android-id" class="headerlink" title="2.9.6 android_id"></a><strong>2.9.6 android_id</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell settings get secure android_id</span><br></pre></td></tr></table></figure><h3 id="2-9-7-IMEI"><a href="#2-9-7-IMEI" class="headerlink" title="2.9.7 IMEI"></a><strong>2.9.7 IMEI</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dumpsys iphonesubinfo</span><br><span class="line"><span class="comment">#而在 Android 5.0 及以上版本里这个命令输出为空，得通过其它方式获取了（需要 root 权限）：</span></span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line"><span class="variable">$service</span> call iphonesubinfo <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-9-8-Android-系统版本"><a href="#2-9-8-Android-系统版本" class="headerlink" title="2.9.8 Android 系统版本"></a><strong>2.9.8 Android 系统版本</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell getprop ro.build.version.release</span><br></pre></td></tr></table></figure><h3 id="2-9-9-IP-地址"><a href="#2-9-9-IP-地址" class="headerlink" title="2.9.9 IP 地址"></a><strong>2.9.9 IP 地址</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell ifconfig | find “Mask”</span><br><span class="line"><span class="variable">$adb</span> shell ifconfig wlan0 <span class="comment">#设备连着 WiFi，可以使用如下命令来查看局域网 IP</span></span><br><span class="line"><span class="variable">$adb</span> shell netcfg <span class="comment"># 上面两个无结果可以用这个，查看网络连接状态</span></span><br></pre></td></tr></table></figure><h3 id="2-9-10-Mac-地址"><a href="#2-9-10-Mac-地址" class="headerlink" title="2.9.10 Mac 地址"></a><strong>2.9.10 Mac 地址</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /sys/<span class="class"><span class="keyword">class</span>/<span class="title">net</span>/<span class="title">wlan0</span>/<span class="title">address</span> # 设备不同可能地址不同</span></span><br></pre></td></tr></table></figure><h3 id="2-9-11-CPU-信息"><a href="#2-9-11-CPU-信息" class="headerlink" title="2.9.11 CPU 信息"></a><strong>2.9.11 CPU 信息</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /proc/cpuinfo</span><br></pre></td></tr></table></figure><h3 id="2-9-12-内存信息"><a href="#2-9-12-内存信息" class="headerlink" title="2.9.12 内存信息"></a><strong>2.9.12 内存信息</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /proc/meminfo</span><br></pre></td></tr></table></figure><h3 id="2-9-13更多硬件与系统属性"><a href="#2-9-13更多硬件与系统属性" class="headerlink" title="2.9.13更多硬件与系统属性"></a><strong>2.9.13更多硬件与系统属性</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /system/build.prop</span><br></pre></td></tr></table></figure><p><strong>adb shell getprop &lt;属性名&gt;</strong></p><p>也可以</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /system/build.prop | grep ro.product.cpu.abi</span><br><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /system/build.prop | find “ro.product.cpu.abi”</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-1991d0e88f480209f16d87c8dabf69b5_720w.jpg"></p><h2 id="2-10-修改设置"><a href="#2-10-修改设置" class="headerlink" title="2.10 修改设置"></a><strong>2.10 修改设置</strong></h2><p>修改设置之后，运行恢复命令仍然不太正常，可以运行 adb reboot 重启设备或手动重启。</p><p>修改设置的原理主要是通过 settings 命令修改 &#x2F;data&#x2F;data&#x2F;com.android.providers.settings&#x2F;databases&#x2F;settings.db 里存放的设置值。</p><h3 id="2-10-1分辨率"><a href="#2-10-1分辨率" class="headerlink" title="2.10.1分辨率"></a><strong>2.10.1分辨率</strong></h3><p><strong>adb shell wm size <em>480x1024</em></strong> #将分辨率修改为 480px * 1024px</p><p><strong>adb shell wm size reset</strong> #恢复原分辨率</p><h3 id="2-10-2屏幕密度"><a href="#2-10-2屏幕密度" class="headerlink" title="2.10.2屏幕密度"></a><strong>2.10.2屏幕密度</strong></h3><p><strong>adb shell wm density <em>160</em></strong> #屏幕密度修改为 160dpi</p><p><strong>adb shell wm density reset</strong> #恢复原屏幕密度</p><h3 id="2-10-3显示区域"><a href="#2-10-3显示区域" class="headerlink" title="2.10.3显示区域"></a><strong>2.10.3显示区域</strong></h3><p><strong>adb shell wm overscan <em>0,0,0,100</em></strong></p><p># 四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 100px留白</p><p><strong>adb shell wm overscan reset</strong> #恢复显示区域</p><h3 id="2-10-4-关闭-USB-调试模式"><a href="#2-10-4-关闭-USB-调试模式" class="headerlink" title="2.10.4 关闭 USB 调试模式"></a><strong>2.10.4 关闭 USB 调试模式</strong></h3><p><strong>adb shell settings put global adb_enabled 0</strong></p><p>使用命令无法恢复调试模式，只能通过手动</p><h3 id="2-10-5-状态栏和导航栏的显示隐藏"><a href="#2-10-5-状态栏和导航栏的显示隐藏" class="headerlink" title="2.10.5 状态栏和导航栏的显示隐藏"></a><strong>2.10.5 状态栏和导航栏的显示隐藏</strong></h3><p><strong>adb shell settings put global policy_control <key-values></strong></p><p><key-values> 可由如下几种键及其对应的值组成，格式为 <key1>&#x3D;<value1>:<key2>&#x3D;<value2></p><p>key 键对应的值</p><p><img src="https://pic3.zhimg.com/80/v2-bd196a935a4b328d77fdfef289dc1926_720w.jpg"></p><p>这些键对应的值可则如下值用逗号组合</p><p><img src="https://pic1.zhimg.com/80/v2-a88f429d1bdaccbae6f7feeef65546d8_720w.jpg"></p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置在所有界面下都同时隐藏状态栏和导航栏</span></span><br><span class="line"><span class="variable">$adb</span> shell settings put global policy_control immersive.full=*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置在包名为 com.package1 和 com.package2 的应用里隐藏状态栏，在除了包名为 com.package3 的所有应用里隐藏导航栏。</span></span><br><span class="line"><span class="variable">$adb</span> shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,<span class="literal">-com</span>.package3</span><br></pre></td></tr></table></figure><h2 id="2-11-实用功能"><a href="#2-11-实用功能" class="headerlink" title="2.11 实用功能"></a><strong>2.11 实用功能</strong></h2><h3 id="2-11-1屏幕截图"><a href="#2-11-1屏幕截图" class="headerlink" title="2.11.1屏幕截图"></a><strong>2.11.1屏幕截图</strong></h3><p><strong>adb exec-out screencap -p &gt; img.png</strong> # 老版本无exec-out命令，只适合于新版的截图</p><p><strong>adb shell screencap -p &#x2F;sdcard&#x2F;img.png</strong> # 老版本截图先保存在设备端</p><p><strong>adb pull &#x2F;sdcard&#x2F;img.png</strong> # 通过pull拷贝到本地</p><p>screencap 参数：</p><p>参数 含义</p><p>-p 指定保存文件为 png 格式</p><p>-d display-id 指定截图的显示屏编号（有多显示屏的情况下）</p><h3 id="2-11-2录制屏幕"><a href="#2-11-2录制屏幕" class="headerlink" title="2.11.2录制屏幕"></a><strong>2.11.2录制屏幕</strong></h3><p><strong>#</strong> 默认录制时间和最长录制时间都是180s</p><p><strong>adb shell screenrecord &#x2F;sdcard&#x2F;filename.mp4</strong></p><p>screenrecord 参数：</p><p>参数 含义</p><p>--size WIDTHxHEIGHT 视频的尺寸，比如 1280x720，默认是屏幕分辨率。</p><p>--bit-rate RATE 视频的比特率，默认是 4Mbps。</p><p>--time-limit TIME 录制时长，单位秒。</p><p>--verbose 输出更多信息。</p><p><strong>2.11.3 重新挂载 system 分区为可写</strong></p><p><strong>注：需要 root 权限</strong></p><p>&#x2F;system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 &#x2F;system 进行写操作，所以需要重新挂载它为可读写。</p><p>步骤：</p><p>1.进入 shell 并切换到 root 用户权限。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br></pre></td></tr></table></figure><p>2.查看当前分区挂载情况。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$mount</span></span><br><span class="line">输出如下</span><br><span class="line">.....</span><br><span class="line">debugfs /sys/kernel/debug debugfs rw,relatime <span class="number">0</span> <span class="number">0</span></span><br><span class="line">none /acct cgroup rw,relatime,cpuacct <span class="number">0</span> <span class="number">0</span></span><br><span class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=<span class="number">750</span>,gid=<span class="number">1000</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=<span class="number">755</span>,gid=<span class="number">1000</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">none /dev/cpuctl cgroup rw,relatime,cpu <span class="number">0</span> <span class="number">0</span></span><br><span class="line">/dev/block/mtdblock0 /system ext4 ro,seclabel,relatime,<span class="keyword">data</span>=ordered <span class="number">0</span> <span class="number">0</span></span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>找到其中我们关注的带 <strong>&#x2F;system</strong> 的那一行：</p><p>3.重新挂载。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$mount</span> <span class="literal">-o</span> remount,rw <span class="literal">-t</span> yaffs2 /dev/block/mtdblock0 /system</span><br></pre></td></tr></table></figure><p><strong>2.11.4 查看连接过的 WiFi 密码</strong></p><p><strong>注：需要 root 权限</strong></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br><span class="line"><span class="variable">$cat</span> /<span class="keyword">data</span>/misc/wifi/*.conf</span><br></pre></td></tr></table></figure><p><strong>2.11.5设置系统日期和时间</strong></p><p><strong>注：需要 root 权限</strong></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br><span class="line"><span class="variable">$date</span> <span class="literal">-s</span> <span class="number">20190531.131600</span>  <span class="comment">#将系统日期和时间更改为 2019 年 05 月 31 日 13 点 16 分 00 秒。</span></span><br></pre></td></tr></table></figure><p><strong>2.11.6 重启手机</strong></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot</span><br></pre></td></tr></table></figure><p><strong>2.11.7 检测设备是否已 root</strong></p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br></pre></td></tr></table></figure><p>此时命令行提示符是 $ 则表示没有 root 权限，是 # 则表示已 root。</p><p><strong>2.11.8 使用 Monkey 进行压力测试</strong></p><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 向 &lt;packagename&gt; 指定的应用程序发送 500 个伪随机事件</span></span><br><span class="line"><span class="variable">$adb</span> shell monkey <span class="literal">-p</span> &lt;packagename&gt; <span class="literal">-v</span> <span class="number">500</span></span><br></pre></td></tr></table></figure><p>monkey 官方文档 <a href="https://link.zhihu.com/?target=https://developer.android.com/studio/test/monkey.html">https://developer.android.com/studio/test/monkey.html</a></p><p><strong>2.11.9 开启&#x2F;关闭 WiFi</strong></p><p><strong>注：需要 root 权限</strong></p><p>开启 WiFi：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> root</span><br><span class="line"><span class="variable">$adb</span> shell svc wifi enable</span><br></pre></td></tr></table></figure><p>关闭 WiFi：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> root</span><br><span class="line"><span class="variable">$adb</span> shell svc wifi disable</span><br></pre></td></tr></table></figure><h2 id="2-12刷机相关命令"><a href="#2-12刷机相关命令" class="headerlink" title="2.12刷机相关命令"></a><strong>2.12刷机相关命令</strong></h2><p><strong>注：不要随便操作，没实验过无法保证成功</strong></p><h3 id="2-12-1重启到-Recovery-模式"><a href="#2-12-1重启到-Recovery-模式" class="headerlink" title="2.12.1重启到 Recovery 模式"></a><strong>2.12.1重启到 Recovery 模式</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot recovery</span><br></pre></td></tr></table></figure><h3 id="2-12-2从-Recovery-重启到-Android"><a href="#2-12-2从-Recovery-重启到-Android" class="headerlink" title="2.12.2从 Recovery 重启到 Android"></a><strong>2.12.2从 Recovery 重启到 Android</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot</span><br></pre></td></tr></table></figure><h3 id="2-12-3重启到-Fastboot-模式"><a href="#2-12-3重启到-Fastboot-模式" class="headerlink" title="2.12.3重启到 Fastboot 模式"></a><strong>2.12.3重启到 Fastboot 模式</strong></h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot bootloader</span><br></pre></td></tr></table></figure><h3 id="2-12-4通过-sideload-更新系统"><a href="#2-12-4通过-sideload-更新系统" class="headerlink" title="2.12.4通过 sideload 更新系统"></a><strong>2.12.4通过 sideload 更新系统</strong></h3><p>如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。</p><p>以 Recovery 模式下更新为例：</p><p>1.重启到 Recovery 模式。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot recovery</span><br></pre></td></tr></table></figure><p>2.在设备的 Recovery 界面上操作进入 Apply update-Apply from ADB。</p><p>注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 Apply update from ADB。</p><p>3.通过 adb 上传和更新系统。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$adb</span> sideload &lt;path<span class="literal">-to-update</span>.zip&gt;</span><br></pre></td></tr></table></figure><h2 id="2-13-更多-adb-shell-命令"><a href="#2-13-更多-adb-shell-命令" class="headerlink" title="2.13 更多 adb shell 命令"></a><strong>2.13 更多 adb shell 命令</strong></h2><h3 id="2-13-1查看进程"><a href="#2-13-1查看进程" class="headerlink" title="2.13.1查看进程"></a><strong>2.13.1查看进程</strong></h3><p>adb shell ps</p><h3 id="2-13-2查看实时资源占用情况"><a href="#2-13-2查看实时资源占用情况" class="headerlink" title="2.13.2查看实时资源占用情况"></a><strong>2.13.2查看实时资源占用情况</strong></h3><p>adb shell top</p><p>top命令参数如下：</p><p>使用方法: top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]</p><blockquote><p>-m num 最多显示多少个进程<br>-n num 刷新多少次后退出<br>-d num 刷新时间间隔（单位秒，默认值 5）<br>-s col 按某列排序（可用 col 值：cpu, vss, rss, thr）<br>-t 显示线程信息<br>-h 显示帮助文档</p></blockquote><p><strong>2.13.3其它</strong></p><p><img src="https://pic1.zhimg.com/80/v2-6044fe28a519255e62608e7ea542e65c_720w.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue之父子组件同步数据</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/Vue%E4%B9%8B%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/Vue%E4%B9%8B%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通过父组件传递prop给子组件，子组件没有刷新，可能是以下几种问题导致</p><ol><li>父组件给子组件绑定的值，可能在组件渲染的时候没有获取到，导致后面父组件有数据更新，子组件也获取不到</li><li>父组件传给子组件的时候，子组件通过data函数去接收，此时父组件更新数据时，子组件仍然获取的是第一次传过来的值</li></ol><p>解决以上两个问题，首先要确认父组件的prop值是否存在，并且在子组件添加watch属性，及时更新同步data和prop的值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">test</span> <span class="attr">:datas</span>=<span class="string">&quot;control&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    child: &#123;&#123;isA&#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isA</span>: <span class="variable language_">this</span>.<span class="property">datas</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">datas</span>: &#123;</span><br><span class="line">      <span class="attr">handler</span>: <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isA</span> = n</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git使用问题</title>
      <link href="/2022/07/25/Git%E7%AF%87/git%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/25/Git%E7%AF%87/git%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- title【必需】文章標題date【必需】文章創建日期updated【可選】文章更新日期tags【可選】文章標籤categories【可選】文章分類keywords【可選】文章關鍵字description【可選】文章描述top_img【可選】文章頂部圖片cover【可選】文章縮略圖(如果沒有設置top_img,文章頁頂部將顯示縮略圖，可設為false/圖片地址/留空)comments【可選】顯示文章評論模塊(默認 true)toc【可選】顯示文章TOC(默認為設置中toc的enable配置)toc_number【可選】顯示toc_number(默認為設置中toc的number配置)toc_style_simple【可選】顯示 toc 簡潔模式copyright【可選】顯示文章版權模塊(默認為設置中post_copyright的enable配置)copyright_author【可選】文章版權模塊的文章作者copyright_author_href【可選】文章版權模塊的文章作者鏈接copyright_url【可選】文章版權模塊的文章連結鏈接copyright_info【可選】文章版權模塊的版權聲明文字mathjax【可選】顯示mathjax(當設置mathjax的per_page: false時，才需要配置，默認 false)katex【可選】顯示katex(當設置katex的per_page: false時，才需要配置，默認 false)aplayer【可選】在需要的頁面加載aplayer的js和css,請參考文章下面的音樂 配置highlight_shrink【可選】配置代碼框是否展開(true/false)(默認為設置中highlight_shrink的配置)aside【可選】顯示側邊欄 (默認 true) --><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p><code>git</code>一些使用的问题总结</p></div><h3 id="gitignore-不生效"><a href="#gitignore-不生效" class="headerlink" title=".gitignore 不生效"></a>.gitignore 不生效</h3><ol><li>.gitignore 不生效的原因: 文件曾经被<code>track</code>过，所以不会被 ignore<br><strong>解决方法：</strong><br>git 清除本地缓存（改变成为 track）的状态，然后再提交</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm -r --cached .</span><br></pre></td></tr></table></figure><ol><li><p>clone 下来的项目.gitignore 不生效</p><p><strong>解决方法:</strong><br>在每个 clone 下来的仓库中手动设置不要检查特定文件的更改情况。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git update-index --assume-unchanged PATH //在PATH处输入要忽略的文件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem</title>
      <link href="/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/problem/"/>
      <url>/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/problem/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>vue重载组件</li></ol><blockquote><p>应用场景: 异步加载数据,数据更新不及时(例如删除地图,应用地图)会展示错误的数据,和绑定key并无关系,可能是展示的数据太大.<br>解决办法:有三种重载组件的方法:1.使用v-if和$nextTick()组合对整个页面的DOM重新加载; 2.使用this.$router.go(0)重新刷新这个页面,但是会造成数据丢失,不推荐使用; 3.给子组件绑定一个key的值为时间戳,每次渲染的时候会去拿这个key 值做对比，如果这一次的key 值和上一次的key值是不一样的才会重新渲染dom元素,会重新执行子组件的周期函数.</p></blockquote><ol start="2"><li><p>map()方法需要return一个值,否则会返回一个undefined</p></li><li><p>Object.assign(target, source)可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</p></li></ol><blockquote><p>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。</p></blockquote><ol start="4"><li>vue操作dom需要把对应属性绑定在data上</li><li>父子组件执行顺序:父组件(create)-&gt;子组件(create,mount)-&gt;父组件(mount)</li></ol><blockquote><p>此时父组件mount没执行,数据没挂载,所以子组件拿不到父组件的传递数据</p></blockquote><ol start="6"><li><p>transform, 操作地图的时候先操作平移再进行缩放的顺序,否则会出现偏差</p></li><li><p>axios请求数据时,设置全局content-type时有bug,需要在参数设置</p></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">header</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/json;charset=UTF-8&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用post请求时,如果data参数为string类型时,<code>content-type</code>自动转化为<code>application/x-www-form-urlencoded</code></p><ol start="8"><li>增加删除class</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">DOM</span>.<span class="property">classList</span>.<span class="title function_">contain</span>(<span class="string">&#x27;className&#x27;</span>)</span><br><span class="line"><span class="variable constant_">DOM</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;className&#x27;</span>)</span><br><span class="line"><span class="variable constant_">DOM</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;className&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="9"><li>使用watch<br>handler:function(){<br>this.&#x2F;&#x2F;&#x2F;&#x2F;<br>&#x2F;&#x2F; <strong>如果使用箭头函数会报错,箭头函数会执行父级上下文,没有自己的作用域</strong><br>}</li><li>$emit传单个参数 $emit(‘test’,parma1)<br>@test($event,$1)</li></ol><p>传多个参数时 $emit(‘test’,parma1,parma2)<br>@test(arguments)</p><ol start="11"><li><p>store.state  数据变化太快监听不到值的变化,只能监听到最后一次,预测是watch只是等栈事件完成之后监听<br>通过watch 监听vuex数据,通过computed返回state的值, 注意需要在state里面初始化改变的值</p></li><li><p>后端开启的服务地址为 127.0.0.1:3000, 前端访问外网ip才能访问到后端<br>axios 配置withCredentials  后端不允许 配置Access-Control-Allow-Origin 为 “*”,只能为域名</p></li><li><p>has been blocked by CORS policy: Request header field cache-control is not allowed by Access-Control-Allow-Headers in preflight response. 配置跨域后预检测、<br>配置前端request Header 与后端配置 allow cor header 一致</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>project_excise</title>
      <link href="/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/project_excise/"/>
      <url>/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/project_excise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="扫地机器人项目"><a href="#扫地机器人项目" class="headerlink" title="扫地机器人项目"></a>扫地机器人项目</h3><ol><li>canvas使用</li><li>数据传输</li></ol><h3 id="电商小程序"><a href="#电商小程序" class="headerlink" title="电商小程序"></a>电商小程序</h3><ul><li>优化点：<ol><li>商品详情页可添加加载动画  </li><li>配置全局选项包括，字体，主题色,导航栏胶囊高度，自适应设备</li></ol></li></ul><h3 id="TB电商后台"><a href="#TB电商后台" class="headerlink" title="TB电商后台"></a>TB电商后台</h3>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>element_problem</title>
      <link href="/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/element_problem/"/>
      <url>/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/element_problem/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>el-dialog组件使用v-if和:visible可以刷新组件，但是对于同一组件默认属性相同的数据<br>不能达到效果，数据会在组件渲染后传入</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">default</span>-values=<span class="string">&quot;device.type == &#x27;department&#x27; ? device.deptData : device.identityData&quot;</span></span><br></pre></td></tr></table></figure><p>使用:key&#x3D;”new Date()” 会及时刷新组件，但是会产生闪烁</p><p>解决方案: 给dialog的子组件绑定key属性，只局部刷新内部组件，不刷新dialog组件就不会因为backgroud刷新引起<br>闪烁</p>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>excise</title>
      <link href="/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/excise/"/>
      <url>/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/excise/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>首字母大写</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">firstUpper</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">replace</span>(<span class="regexp">/^\S/</span>, <span class="function"><span class="params">l</span> =&gt;</span> l.<span class="title function_">toUpperCase</span>() )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组排序</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ar = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">//升序</span></span><br><span class="line">ar.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//降序</span></span><br><span class="line">ar.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b - a</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>数组去重<br>大致分为两种</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Set不会出现重复的值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">unique</span>(arr) <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]  不能去除重复的对象,因为指针地址不同</span></span><br><span class="line"><span class="comment">//两层循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">e,index,arr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(e,<span class="number">0</span>) === index</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">unique</span>(arr) <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br><span class="line"> <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> x = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,curr</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (pre.<span class="title function_">indexOf</span>(curr) === -<span class="number">1</span>) &#123;</span><br><span class="line">         pre.<span class="title function_">push</span>(curr)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> pre</span><br><span class="line"> &#125;, [])</span><br></pre></td></tr></table></figure></li><li><p>判断字符串是否为数字</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;1111&#x27;</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(<span class="built_in">parseInt</span>(a)))&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不是数字&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//parseInt()会忽略掉数字后面的字符</span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(<span class="title class_">Number</span>(a)))&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不是数字&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断字符串是否全是中文</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [ <span class="string">&#x27;#076&#x27;</span>, <span class="string">&#x27;#076&#x27;</span>, <span class="string">&#x27;隆隆岩&#x27;</span>, <span class="string">&#x27;ゴローニャ&#x27;</span>, <span class="string">&#x27;Golem&#x27;</span>, <span class="string">&#x27;岩石&#x27;</span>, <span class="string">&#x27;地面&#x27;</span> ]</span><br><span class="line">a.<span class="title function_">filter</span>(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="regexp">/[A-Za-z]+/</span>.<span class="title function_">test</span>(e) || <span class="regexp">/^[\u4e00-\u9fa5]+$/</span>.<span class="title function_">test</span>(e) )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>求数组最大值</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(...a)</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">filter</span>(<span class="function">(<span class="params">e,i</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[i]&gt;a[i+<span class="number">1</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>父级元素宽高度位置,子元素设置宽高度一致</p></li><li><p>递归深拷贝</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">let</span> o = &#123;</span><br><span class="line"> <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line"> <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line"> <span class="attr">c</span>:&#123;</span><br><span class="line">     <span class="attr">x</span>:<span class="number">3</span>,</span><br><span class="line">     <span class="attr">y</span>:<span class="number">4</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyFun</span>(<span class="params">o</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> copy;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> o === <span class="string">&#x27;string&#x27;</span> || <span class="keyword">typeof</span> o === <span class="string">&#x27;number&#x27;</span> || <span class="keyword">typeof</span> o === <span class="string">&#x27;array&#x27;</span>)&#123;</span><br><span class="line">        copy = o</span><br><span class="line">        <span class="keyword">return</span> copy</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> o === <span class="string">&#x27;object&#x27;</span> )&#123;</span><br><span class="line">        <span class="keyword">let</span> copyO = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(o, key)) &#123;</span><br><span class="line">                <span class="comment">// const e = o[key]</span></span><br><span class="line">                <span class="keyword">const</span> e = <span class="title function_">copyFun</span>(o[key]); <span class="comment">//递归</span></span><br><span class="line">                copyO[key] = e</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> copyO</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="title function_">copyFun</span>(o)</span><br><span class="line">o.<span class="property">c</span>.<span class="property">x</span> = <span class="string">&#x27;sss&#x27;</span></span><br><span class="line">o.<span class="property">a</span> = <span class="string">&#x27;aaaa&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"></span><br><span class="line">json.<span class="title function_">stringify</span>()  json.<span class="title function_">parse</span>()</span><br></pre></td></tr></table></figure></li><li><p>2!&#x3D;”2”+2&#x3D;&#x3D;”2”</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="number">2</span>!=<span class="string">&quot;2&quot;</span>+<span class="number">2</span>==<span class="string">&quot;2&quot;</span> <span class="comment">// false</span></span><br><span class="line"> <span class="comment">// ！=  ，  ==  优先级为 12      +，- 的优先级为14</span></span><br><span class="line"> <span class="comment">// 考虑由下面的表示法描述的表达式。其中，OP1 和 OP2 都是操作符的占位符。</span></span><br><span class="line"></span><br><span class="line"><span class="string">`a OP1 b OP2 c`</span></span><br><span class="line"><span class="comment">// 如果 OP1 和 OP2 具有不同的优先级，则优先级最高的运算符先执行，不用考虑结合性。观察乘法如何具有比加法更高的优先级并首先执行，即使加法是首先写入代码的。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> + <span class="number">10</span> * <span class="number">2</span>);   <span class="comment">// 输出 23</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> + (<span class="number">10</span> * <span class="number">2</span>)); <span class="comment">// 输出 23 因为这里的括号是多余的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="number">3</span> + <span class="number">10</span>) * <span class="number">2</span>); <span class="comment">// 输出 26 因为括号改变了优先级</span></span><br><span class="line">&gt; 一般的结合性是从做到右, 像，<span class="string">`赋值,三元运算符,幂,逻辑非,按位非,await,typeof,一元加法,一元减法`</span> 则是从右到左</span><br></pre></td></tr></table></figure><ol start="10"><li><p>树形数据结构解析</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">d</span><br></pre></td></tr></table></figure></li><li><p>循环打印倒三角形</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1,2,3</span></span><br><span class="line"><span class="comment">// 1,2</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">t</span>(<span class="params">N</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="title class_">Array</span>(N).<span class="title function_">fill</span>(<span class="number">1</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">e, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> e + index</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(arr))</span><br><span class="line">    N--</span><br><span class="line">    <span class="keyword">if</span> (N &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="title function_">t</span>(N)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>interview-Vue</title>
      <link href="/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/interview-Vue/"/>
      <url>/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/interview-Vue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>VUE生命周期<br> 父子组件嵌套顺序<br> 两种路由优劣</p></li><li><p>vuex作用是什么,为什么不用全局变量<br> 用于DOM的渲染,重载DOM</p></li><li><p>vue和react区别</p><ol><li>数据传递<br> React一直不支持双向绑定，提倡的是单向数据流，称之为onChange&#x2F;setState()模式。不过由于我们一般都会用Vuex以及Redux等单向数据流的状态管理框架，因此很多时候我们感受不到这一点的区别了。</li><li>通信方式<br> Vue中有三种方式可以实现组件通信：父组件通过props向子组件传递数据或者回调，虽然可以传递回调，但是我们一般只传数据；子组件通过事件向父组件发送消息；通过V2.2.0中新增的provide&#x2F;inject来实现父组件向子组件注入数据，可以跨越多个层级。<br> React中也有对应的三种方式：父组件通过props可以向子组件传递数据或者回调；可以通过 context 进行跨层级的通信，这其实和 provide&#x2F;inject 起到的作用差不多。React 本身并不支持自定义事件，而Vue中子组件向父组件传递消息有两种方式：事件和回调函数，但Vue更倾向于使用事件。在React中我们都是使用回调函数的，这可能是他们二者最大的区别。</li><li>渲染方式<br> React是在组件JS代码中，通过原生JS实现模板中的常见语法，比如插值，条件，循环等，都是通过JS语法实现的，更加纯粹更加原生。而Vue是在和组件JS代码分离的单独的模板中，通过指令来实现的，比如条件语句就需要 v-if 来实现对这一点，这样的做法显得有些独特，会把HTML弄得很乱。</li></ol></li><li><p>vue2和3的区别</p><ol><li>响应式原理api的改变,vue2响应式采用的是defineProperty,vue3采用的proxy,前者修改对象属性的权限标签，后者代理整个对象</li></ol> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果一个描述符同时拥有 value 或 writable 和 get 或 set 键，则会产生一个异常。三个取其一</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a, <span class="string">&#x27;x&#x27;</span>, &#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;访问了x属性&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    q = n</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;改变了x值&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 可枚举，访问 或for in</span></span><br><span class="line"><span class="attr">configurable</span>: <span class="literal">true</span> <span class="comment">// 修改属性描述符或删除描述符</span></span><br><span class="line">&#125;)</span><br><span class="line">a.<span class="property">x</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  <span class="comment">// 改变了x  访问了x</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">x</span>); <span class="comment">// 访问了x属性 [1,2,3,4]</span></span><br><span class="line">a.<span class="property">x</span>[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span> <span class="comment">// 访问了  访问数组下标是无法监听到值得改变，但是值确实被改变过，所以没有去执行set()， 同理push和pop等数组的操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">x</span>) <span class="comment">// 访问了 [&#x27;a&#x27;,2,3,4]</span></span><br></pre></td></tr></table></figure><p> 但是使用proxy代理可以避免这种情况</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(a, &#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;target[property]: &#x27;</span>, target[property]);</span><br><span class="line">    <span class="keyword">return</span> target[property]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">target, prop, n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(n)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this value is not a Array&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> a1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj)</span><br><span class="line">a1[<span class="number">1</span>] <span class="comment">// target[property]:  2</span></span><br><span class="line"></span><br><span class="line">a1[<span class="number">2</span>] <span class="comment">// target[property]:  3</span></span><br><span class="line"></span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">12</span> <span class="comment">// this value is not a Array</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a1[2] : &#x27;</span>, a1[<span class="number">2</span>] ); <span class="comment">// 12</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Proxy</span>(o, &#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params">target, prop</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> target[prop]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">target,prop,n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop <span class="keyword">in</span> target) &#123;</span><br><span class="line">    target[prop] = n</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;target[prop]: &#x27;</span>, target[prop]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;not exist props&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">obj2.<span class="property">x</span> = <span class="number">2</span> <span class="comment">// target[prop]:  2</span></span><br><span class="line">obj2.<span class="property">z</span> = <span class="number">3</span> <span class="comment">//  throw new Error(&#x27;not exist props&#x27;) 非目标属性也会运行set()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj2: &#x27;</span>, obj2); <span class="comment">// &#123;x:2,y:2&#125; proxy会改变原对象</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>diff算法， vue3采用block tree的做法，重新渲染算法利用闭包进行缓存，vue2对比所有DOM<br> 建立数据, vue2使用选项类型options API 对比vue3合成型Composition API， 旧的分割了不同的属性（data,computed,methods…） 新的Composition API能使用function来分割，</p></li><li><p>composition api和option api的区别<br> • 在逻辑组织和逻辑复用方面，Composition API是优于Options API<br> • Composition API中没有对this的使用，减少了this指向不明的情况<br> • 如果是小型组件，可以继续使用Options API，也是十分友好的</p></li></ol></li><li><p>实现组件逻辑复用（mixin和composition api）<br> 全局mixin</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;data () &#123;&#125;, <span class="title function_">created</span>(<span class="params"></span>) &#123;&#125;,<span class="attr">methods</span>:&#123;&#125;&#125;)</span><br></pre></td></tr></table></figure><p> 局部调用mixin</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123; <span class="title function_">data</span>(<span class="params"></span>) &#123;&#125;,<span class="attr">methods</span>: &#123;&#125; &#125;</span><br><span class="line"><span class="keyword">import</span> mixin <span class="keyword">from</span> <span class="string">&#x27;./xxx.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">mixins</span>:[mixin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Composition的使用</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;onMounted,reactive,watch&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; </span><br><span class="line"><span class="attr">props</span>: &#123; <span class="attr">name</span>: <span class="title class_">String</span>, &#125;, </span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>, </span><br><span class="line"><span class="attr">components</span>: &#123;&#125;, </span><br><span class="line"><span class="title function_">setup</span>(<span class="params">props,ctx</span>) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">name</span>) </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>) </span><br><span class="line">    <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;) </span><br><span class="line">    <span class="title function_">watch</span>( <span class="function">() =&gt;</span> data.<span class="property">a</span>, <span class="function">(<span class="params">val, oldVal</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(val) &#125; ) <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123; &#125;) </span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">myMethod</span> = (<span class="params">obj</span>) =&gt;&#123; &#125; </span><br><span class="line">    retrun &#123; data, myMethod &#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;data, myMethod&#125; <span class="keyword">from</span> <span class="string">&#x27;./xxx.vue&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>具名插槽</p></li></ol>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- //子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">    这是头部内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span> <span class="attr">:content</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    这是主体内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">    这是尾部内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- //父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 这是头部内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这是主体内容 --&gt;</span></span><br><span class="line">        &#123;&#123;slotProps.content.prop&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这是尾部内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>interview</title>
      <link href="/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/interview/"/>
      <url>/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/interview/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>js对象的对象原型</p> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">spacify</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">spacify</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.<span class="title function_">spacify</span>()  <span class="comment">//&#x27;h e l l o&#x27;  在字符串对象上添加一个spacify的方法</span></span><br></pre></td></tr></table></figure><p> Javascript中函数声明和函数表达式是存在区别的，函数声明在JS解析时进行函数提升，因此在同一个作用域内，不管函数声明在哪里定义，该函数都可以进行调用。而函数表达式的值是在JS运行时确定，并且在表达式赋值完成后，该函数才能调用</p></li><li><p>JS中var定义的全局变量与window对象上定义的属性的区别</p><ol><li>var定义的全局变量,对象,函数都是<code>window</code>对象的成员</li></ol> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;yy&#x27;</span></span><br><span class="line"><span class="keyword">var</span> action = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;rice&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span>,<span class="variable language_">window</span>.<span class="title function_">action</span>())  <span class="comment">//yy,rice</span></span><br></pre></td></tr></table></figure><ol><li>全局变量不能通过delete删除,而window上的属性可以删除</li></ol> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">delete</span> a;</span><br><span class="line"><span class="keyword">delete</span> b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// b is not defined</span></span><br></pre></td></tr></table></figure><ol><li>访问未定义的变量会报错,通过window查询的变量只会显示<code>undefined</code></li></ol> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// undefined   变量的提升</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// VM961:1 Uncaught ReferenceError: b is not defined</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">b</span> = <span class="number">2</span> </span><br></pre></td></tr></table></figure><ol><li>在函数中定义的var变量不会被外部访问,而定义在window上的属性会被外部访问</li></ol> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">aa</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">b</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">aa</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// a is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p>apply(),call(),bind()三者的使用与区别</p><ol><li>apply()的使用</li></ol> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">12</span>,</span><br><span class="line">    <span class="attr">myFun</span>: <span class="keyword">function</span>(<span class="params">year,month</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;今年&#x27;</span>+year+<span class="string">&#x27;月&#x27;</span>+month,<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;的年龄为&#x27;</span>+<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ak = obj.<span class="property">myFun</span></span><br><span class="line"><span class="title function_">ak</span>(<span class="number">1992</span>,<span class="number">6</span>) <span class="comment">// 今年1992月6 a的年龄为undefined   重新赋值后,此时的this指向window</span></span><br><span class="line">ak.<span class="title function_">apply</span>(obj,[<span class="number">1993</span>,<span class="number">5</span>]) <span class="comment">// 今年1993月5 undefined的年龄为12   将this的指向传递给obj</span></span><br></pre></td></tr></table></figure><ol><li>call()的使用</li></ol> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">12</span>,</span><br><span class="line">    <span class="attr">myFun</span>: <span class="keyword">function</span>(<span class="params">year,month</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;今年&#x27;</span>+year+<span class="string">&#x27;月&#x27;</span>+month,<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;的年龄为&#x27;</span>+<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ak = obj.<span class="property">myFun</span></span><br><span class="line"><span class="title function_">ak</span>(<span class="number">1992</span>,<span class="number">6</span>) <span class="comment">// 今年1992月6 a的年龄为undefined   重新赋值后,此时的this指向window</span></span><br><span class="line">ak.<span class="title function_">call</span>(obj,<span class="number">1993</span>,<span class="number">5</span>) <span class="comment">// 今年1993月5 undefined的年龄为12   将this的指向传递给obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用法和apply()一样,apply()的参数传递是一个数组,而call()传递的参数是一个数组列表</span></span><br><span class="line"><span class="comment">//当指向的对象为null,或者undefined的时候,指向的是window</span></span><br><span class="line"><span class="comment">//两者改变指向的对象后会立即执行</span></span><br></pre></td></tr></table></figure><ol><li>bind()的使用</li></ol> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">12</span>,</span><br><span class="line">    <span class="attr">myFun</span>: <span class="keyword">function</span>(<span class="params">year,month</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;今年&#x27;</span>+year+<span class="string">&#x27;月&#x27;</span>+month,<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;的年龄为&#x27;</span>+<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ak = obj.<span class="property">myFun</span></span><br><span class="line"><span class="title function_">ak</span>(<span class="number">1992</span>,<span class="number">6</span>) <span class="comment">// 今年1992月6 a的年龄为undefined   重新赋值后,此时的this指向window</span></span><br><span class="line"><span class="keyword">var</span> bk = ak.<span class="title function_">bind</span>(obj,<span class="number">1997</span>,<span class="number">8</span>)  <span class="comment">//bind使用方法和call()大致一样,但是不会立即执行,且可以多次传入参数</span></span><br><span class="line"><span class="title function_">bk</span>(<span class="number">2005</span>) <span class="comment">// 今年1997月8 undefined的年龄为12  bind指定对象后,不会立即执行,且可以分开传参</span></span><br></pre></td></tr></table></figure><p> <strong>apply，call，bind三者的区别</strong>:</p><ul><li>三者都可以改变函数的this对象指向。</li><li>三者第一个参数都是this要指向的对象，如果如果没有这个参数或参数为undefined或null，则默认指向全局window。</li><li>三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入。</li><li>bind 是返回绑定this之后的函数，便于稍后调用；apply 、call 则是立即执行 。</li></ul></li><li><p>JavaScript执行顺序<br>事件栈 &#x3D;&gt; 所有微观任务(Promise,process,nextTick,Object.observe) &#x3D;&gt; 一个宏观任务(setTimeout,setTimeInterval,setImmediate,I&#x2F;O,交互操作,UI渲染) &#x3D;&gt; 事件栈<br>事件循环<br>详情见<a href="http://blog.ws865.com/1374.html">JavaScript中宏观和微观及队列的概念</a><br><strong>执行宏观任务过程中,发生了什么</strong>:  将微观任务放在微观任务队列中</p></li><li><p>闭包的作用</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">out</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count: &#x27;</span>, count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="title function_">out</span>()</span><br><span class="line"><span class="title function_">x</span>()</span><br><span class="line"><span class="title function_">x</span>()</span><br><span class="line"><span class="keyword">let</span> y = <span class="title function_">out</span>()</span><br><span class="line"><span class="title function_">y</span>()</span><br><span class="line"><span class="title function_">y</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1,2,3,4 </span></span><br><span class="line"><span class="comment">// 如果count在第一个函数内部，会重新初始化count   //1,2,1,2</span></span><br></pre></td></tr></table></figure><p><a href="http://blog.ws865.com/1032.html">闭包的概念及作用</a></p></li><li><p>Promise的使用<br> <a href="http://blog.ws865.com/1102.html">promise的使用</a></p></li><li><p>arguments对象<br><code>arguments</code> 是一个对应于传递给函数的参数的类数组对象.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">     <span class="comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">     <span class="comment">// expected output: 1</span></span><br><span class="line">     <span class="keyword">switch</span></span><br><span class="line"></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">     <span class="comment">// expected output: 2</span></span><br><span class="line"></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">2</span>]);</span><br><span class="line">     <span class="comment">// expected output: 3</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">func1</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"> <span class="comment">//如果在闭包中使用arguments得不到任何参数</span></span><br></pre></td></tr></table></figure><p> arguments除了<code>length</code>没有其他的<code>Array</code>属性,arguments只能在函数中使用<br> 但是可以将arguments转化成数组:</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">slice</span>().<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"><span class="keyword">var</span> args = [].<span class="title function_">slice</span>().<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES2015/ES6</span></span><br><span class="line"><span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>)</span><br><span class="line"><span class="keyword">const</span> args = ...[<span class="variable language_">arguments</span>]</span><br></pre></td></tr></table></figure></li><li><p>从输入URL到页面加载完成都发生了什么</p><ol><li>DNS服务器解析IP</li><li>建立tcp连接</li><li>在tcp协议基础上进行http协议连接</li><li>三次握手后成功后 SYN&#x2F;SYN-ACK&#x2F;ACK</li><li>服务器对客户端做出响应,并发送对应的html文本</li><li>浏览器显示html文本</li><li>释放TCP连接(四次握手)</li></ol></li><li><p>sessionStorage,localStorage,cookie的区别</p><ol><li>容量大小区别:sessionStorage容量5m,localStorage容量20M,cookie容量4kb</li><li>传输:cookie可以用于网络传输,其他两个是本地存储</li><li>时间:sessionStorage和cookie在设置有效期之前都有效,一旦窗口关闭,数据就失效了,localStorage永久有效,除非手动设置</li><li>作用域:sessionStorage和localStorage在同源不同窗口可以共享,cookie在不同窗口就无法共享</li></ol></li><li><p>set数据结构和map数据结构<br><a href="http://blog.ws865.com/1187.html">set和map数据结构的使用</a><br>map数据和object区别在于map的键值可以用任何数据,而object的键无法用非字符串或整数<br>map会保留所有元素的顺序<br>map数据可以直接遍历,提高执行效率</p></li><li><p>key的作用有哪些<br>v-for遍历时,用id,uuid之类作为key唯一标识节点加速DOM渲染:<br>如果使用了<code>key</code>,vue会使用keys的顺序记录<code>element</code>,曾经拥有了key的element如果不出现,会被remove或destroy<br>响应式系统没有监听到数据时,会使用<code>new Date()</code>生成的时间戳作为key,手动强制渲染</p><p>如果不使用key,会造成如果删除其中某一项内容,会影响后面值的索引,导致顺序混乱</p></li><li><p>keep-live有什么作用<br>keep-alive可以在组件切换时，保存其包裹的组件的状态，使其不被销毁，防止多次渲染。<br>其拥有两个独立的生命周期钩子函数 actived 和 deactived，使用keep-alive包裹的组件在切换时不会被销毁，而是缓存到内存中并执行 deactived 钩子函数，命中缓存渲染后会执行 actived 钩子函数。</p></li><li><p>组件传值</p><ol><li>父子组件传值 props ,this.$emit()</li><li>跨组件传值provide(), inject(), 不是响应式的传值</li><li>vuex传值 state,getter,mutation,action,</li></ol></li><li><p>get和post的区别</p><ol><li>get 是通过把参数包含在URL中,只发送一个数据包,响应快,性能会好点,url的长度受限制</li><li>post 通过request body传递参数,post发送请求会有两个数据包,一个header和data数据包,安全性更高,</li></ol></li><li><p>let和const跟var的区别<br>const声明后就不能修改该常量的值,即栈的值和地址<br>let和const在函数外部声明,不会被添加到window对象里面,而var声明会在window对象生成一个属性<br>let的作用域只在声明的代码块内部,不会变量提升,如if()的代码块,var声明的变量为该语句的函数体内,会出现个变量提升</p></li><li><p>ES6 新增</p><ol><li>let,const</li><li>解构赋值</li><li>for of, …扩展运算符<br> for of 可直接遍历值</li><li>函数和参数</li><li>Set和Map</li><li>Promise</li></ol></li><li><p>箭头函数和普通函数区别</p><ol><li>语法更加清晰简洁</li><li>不会创建自己的this</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="string">&#x27;Global&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// setTimeout中使用普通函数</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// setTimeout中使用箭头函数</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line">fun1.<span class="title function_">call</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;);     <span class="comment">// &#x27;Global&#x27;</span></span><br><span class="line">fun2.<span class="title function_">call</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;);     <span class="comment">// &#x27;Obj&#x27;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>箭头函数继承而来的this指向永远不变,.call()&#x2F;.apply()&#x2F;.bind()无法改变箭头函数中this的指向</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="string">&#x27;Global&#x27;</span>;</span><br><span class="line"><span class="comment">// 箭头函数定义在全局作用域</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun1</span>();     <span class="comment">// &#x27;Global&#x27;</span></span><br><span class="line"><span class="comment">// this的指向不会改变，永远指向Window对象</span></span><br><span class="line">fun1.<span class="title function_">call</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;);     <span class="comment">// &#x27;Global&#x27;</span></span><br><span class="line">fun1.<span class="title function_">apply</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;);    <span class="comment">// &#x27;Global&#x27;</span></span><br><span class="line">fun1.<span class="title function_">bind</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;)();   <span class="comment">// &#x27;Global&#x27;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>箭头函数没有自己的arguments,可以使用rest参数代替</li></ol></li><li><p>浏览器如何渲染<br>关键渲染路径是指浏览器从最初接收请求来的HTML、CSS、javascript等资源，然后解析、构建树、渲染布局、绘制，最后呈现给客户能看到的界面这整个过程。<br>所以浏览器的渲染过程主要包括以下几步：</p><ul><li><p>解析HTML生成DOM树。</p></li><li><p>解析CSS生成CSSOM规则树。</p></li><li><p>将DOM树与CSSOM规则树合并在一起生成渲染树。</p></li><li><p>遍历渲染树开始布局，计算每个节点的位置大小信息。</p></li><li><p>将渲染树每个节点绘制到屏幕。</p></li></ul></li><li><p>webpack常用插件</p><ol><li>loader功能</li><li>图片压缩插件：<code>imagemin-webpack-plugin</code><br> 产生背景：图片过大，加载速度慢，浪费存储空间。<br> 作用：批量压缩图片。</li><li>清空文件夹插件：<code>clean-webpack-plugin</code><br> 产生背景：每次进行打包需要手动清空目标文件夹。<br> 作用：每次打包时先清空output文件夹。</li><li>提供全局变量插件<br> 产生背景：每次进行import引入全局模块，很麻烦。</li></ol><p> 作用：可以导入到全局，之后不用再在每个页面import。<br>5. css 去除无用的样式<code>purifycss-webpack</code><br> 产生背景：编写的css可能出现冗余情况。</p><p> 作用：去除冗余的css代码。</p></li><li><p>js性能优化</p><ol><li>删除未使用的js代码,包括未使用的功能性代码,多余的依赖库,滥用的npm包</li><li>数组和对象操作避免使用构造函数,比如new Array(), new Object()</li><li>避免使用非必要的全局变量</li><li>合理使用缓存机制,访问本地数据比远程数据块</li><li>减少循环中的活动</li><li>尽量避免使用闭包</li></ol></li><li><p>css3新特性,怎么做不同浏览器兼容<br>通过使用 前缀  -webkit- -firefox-的形式</p></li><li><p>水平垂直居中<br>本身控制: position + left right + margin: 0 auto  水平垂直居中均可<br>父级控制: display:flex justify-content:center<br>未知元素宽高度: transform + position + translate(x,y)是相对于自身进行偏移, 使用百分比也是根据自身的百分比,所以居中使用position + translate</p></li><li><p>this是什么,作用是什么</p></li><li><p>浏览器缓存</p><ol><li>http缓存是基于HTTP协议的浏览器文件级缓存机制。</li><li>websql这种方式只有较新的chrome浏览器支持，并以一个独立规范形式出现</li><li>indexDB 是一个为了能够在客户端存储可观数量的结构化数据，并且在这些数据上使用索引进行高性能检索的 API</li><li>Cookie一般网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）</li><li>Localstorage html5的一种新的本地缓存方案，目前用的比较多，一般用来存储ajax返回的数据，加快下次页面打开时的渲染速度</li><li>Sessionstorage和localstorage类似，但是浏览器关闭则会全部删除，api和localstorage相同，实际项目中使用较少。</li><li>application cache 是将大部分图片资源、js、css等静态资源放在manifest文件配置中</li><li>cacheStorage是在ServiceWorker的规范中定义的，可以保存每个serverWorker申明的cache对象</li><li>flash缓存 这种方式基本不用，这一方法主要基于flash有读写浏览器端本地目录的功能</li></ol></li><li><p>跨域的解决办法<br>跨域的作用是什么:跨域是由于浏览器同源策略影响的,同源策略能保证文档不会遭受外部脚本的攻击</p><ol><li>通过jsonp跨域</li><li>document.domain + iframe跨域</li><li>location.hash + iframe</li><li>window.name + iframe跨域</li><li>postMessage跨域</li><li>跨域资源共享（CORS&lt;drawImage,来自css图形,webGL贴图,web字体，XMLHttprequest&gt;）浏览器本身不能跨域，但是通过cors可以实现</li><li>nginx代理跨域</li><li>nodejs中间件代理跨域</li><li>WebSocket协议跨域</li></ol></li><li><p>js安全性问题</p></li><li><p>promise的原理及原生代码</p></li><li><p>前端性能优化</p><ol><li>减少http请求,每次http请求需要经历DNS查询,tcp握手,服务器响应,浏览器接收等操作</li><li>使用http2,多个请求共享一个tcp连接多路复用,所有文件同时发送,节约时间</li><li>使用服务端渲染,</li><li>静态资源使用CDN</li><li>将css放在顶部,js文件放在底部,解决渲染阻塞的问题</li><li>使用字体图标 iconfont 代替图片图标,iconfont文件小</li><li>善用缓存，不重复加载相同的资源</li><li>压缩文件</li><li>图片优化(1.响应式 图片2,)</li></ol></li><li><p>原型链原理,作用及使用方法<br>原型链是针对构造函数的，比如我先创建了一个函数，然后通过一个变量new了这个函数，那么这个被new出来的函数就会继承创建出来的那个函数的属性，然后如果我访问new出来的这个函数的某个属性，但是我并没有在这个new出来的函数中定义这个变量，那么它就会往上（向创建出它的函数中）查找，这个查找的过程就叫做原型链。最终都指向null</p><p>Fun &#x3D;&gt; 原型对象 &#x3D;&gt; Object的原型对象 &#x3D;&gt; null</p></li><li><p>js中数组会修改原数组方法有哪些<br>会改变原数组: pop(),push(),shift(),unshift(),reverse(),sort(),splice(),fill(),copyWithin()<br>不会改变原数组: concat(),join(),slice(),filter(),reduce()</p></li><li><p>css兼容性问题,css3新增特性<br>CSS3新增特性:<br>圆角边框: <code>border-colors</code>,<code>border-image</code>,<code>border-radius</code><br>文本阴影与盒阴影: <code>text-shadow</code>,<code>box-shadow</code><br>文本截断:<code>text-overflow</code><br>背景尺寸:background-image<br>过渡: <code>transition: &lt;property&gt; &lt;duration&gt; &lt;timing-function&gt; &lt;delay&gt;</code><br>动画: <code>animation: animation-name，animation-duration, animation-timing-function，animation-delay，animation-iteration-count，animation-direction，animation-fill-mode(none|forwards|backwards|both) 和 animation-play-state</code><br>转换: <code>transfrom: rotate(deg,deg) | scale() | skew(deg,deg)</code><br>选择器: <a href="https://www.w3school.com.cn/cssref/css_selectors.asp">CSS3选择器</a></p></li><li><p>computed和watch的区别<br>computed类似一个过滤器,对绑定到view的数据进行处理</p></li><li><p>防抖和节流的区别</p></li><li><p>字符串和数字转换</p></li><li><p>双向绑定原理</p></li></ol><h2 id="2022面试题"><a href="#2022面试题" class="headerlink" title="2022面试题"></a>2022面试题</h2><ol><li><p>hash 和 history的区别<br> 这里的hash是指尾巴后的 # 号以及后面的字符。hash也称作锚点，本身是用来做页面定位的，她可以使对应 id 的元素显示在可视区域内。<br> hash 本来是拿来做页面定位的，如果拿来做路由的话，原来的锚点功能就不能用了。其次，hash 的传参是基于 url 的，如果要传递复杂的数据，会有体积的限制，而 history 模式不仅可以在url里放参数，还可以将数据存放在一个特定的对象中。<br> 最明显之差别：<br> （1）在url显示： hash有#很Low ； history 无#好看<br> （2）回车刷新： hash 可以加载到hash值对应页面 ； history一般就是404掉了<br> （3）支持版本： hash支持低版本浏览器和IE浏览器 ； historyHTML5新推出的API</p><p> <em>hash路由</em> location.hash<br> 浏览器地址#后面的变化，是可以被监听到的，浏览器为我们提供了原生监听事件hashchange，它可以监听到如下的变化：<br> 点击a标签，改变了浏览器地址<br> 浏览器的前进后退行为<br> 通过window.location方法，改变浏览器地址</p><p> <em>history路由</em> location.pathname<br> 当活动历史记录条目更改时，将触发popstate事件。如果被激活的历史记录条目是通过对history.pushState（）的调用创建的，或者受到对history.replaceState（）的调用的影响，popstate事件的state属性包含历史条目的状态对象的副本。</p><blockquote><p>需要注意的是调用history.pushState()或history.replaceState()不会触发popstate事件。只有在做出浏览器动作时，才会触发该事件，如用户点击浏览器的回退按钮（或者在Javascript代码中调用history.back()或者history.forward()方法）</p></blockquote><p> 我们可以通过遍历页面上的所有 a 标签，阻止 a 标签的默认事件的同时，加上点击事件的回调函数，在回调函数内获取 a 标签的 href 属性值，再通过 pushState 去改变浏览器的 location.pathname 属性值。然后手动执行 popstate 事件的回调函数，去匹配相应的路由</p></li><li><p>CSS重绘和回流</p><ul><li>浏览器使用流式布局模型 <code>(Flow Based Layout)</code>。</li><li>浏览器会把HTML解析成DOM，把CSS解析成<code>CSSOM</code>，<code>DOM</code>和<code>CSSOM</code>合并就产生了<code>Render Tree</code>。</li><li>有了<code>RenderTree</code>，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点绘制到页面上。</li><li>由于浏览器使用流式布局，对<code>Render Tree</code>的计算通常只需要遍历一次就可以完成，但<code>table</code>及其内部元素除外，他们可能需要多次计算，通常要花3倍于同等元素的时间，这也是为什么要避免使用table布局的原因之一。</li><li>当<code>Render Tree</code>中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。</li></ul></li></ol><h3 id="会导致回流的操作"><a href="#会导致回流的操作" class="headerlink" title="会导致回流的操作"></a>会导致回流的操作</h3><pre><code>1. 页面首次渲染2. 浏览器窗口大小发生改变3. 元素尺寸或位置发生改变4. 元素内容变化（文字数量或图片大小等等）5. 元素字体大小变化6. 添加或者删除可见的DOM元素7. 激活CSS伪类（例如：:hover）8. 查询某些属性或调用某些方法</code></pre><h3 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h3><pre><code>当页面中元素样式的改变并不影响它在文档流中的位置时（例如：`color`、`background-color`、`visibility`等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。CSS避免1. 避免使用`table`布局。2. 尽可能在`DOM`树的最末端改变`class`。3. 避免设置多层内联样式。4. 将动画效果应用到`position`属性为`absolute`或`fixed`的元素上。5. 避免使用`CSS`表达式（例如：`calc()`）。*JavaScript避免*避免频繁操作样式，最好一次性重写style属性，或者将样式列表定义为class并一次性更改class属性。避免频繁操作DOM，创建一个documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中。也可以先为元素设置display: none，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>basic_js</title>
      <link href="/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/basic_js/"/>
      <url>/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/basic_js/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Javascript基础语法"><a href="#Javascript基础语法" class="headerlink" title="Javascript基础语法"></a>Javascript基础语法</h1><h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 Array"></a>数组 Array</h2><ul><li><p>属性<br><code>length</code>: 返回数组的长度</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].<span class="property">length</span>  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li><li><p>方法<br> <code>filter()</code>: 过滤满足条件的数组的每一项内容</p></li></ul> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">42</span>,<span class="number">63</span>]</span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">filter</span>( <span class="keyword">function</span> (<span class="params">item</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 11,11,42,63</span></span><br></pre></td></tr></table></figure><p><code>indexOf()</code>:可返回被指定的值在字符串中首次出现的位置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;babdjacdab&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;b&#x27;</span>))  <span class="comment">//0</span></span><br></pre></td></tr></table></figure><p><code>splice()</code>:用于添加或删除数组中元素,返回操作完的原数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">1</span>))  <span class="comment">//[&#x27;green&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="string">&#x27;green&#x27;</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">  <span class="keyword">var</span> res = arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">//[&#x27;hello&#x27;, &#x27;pink&#x27;, &#x27;world&#x27;, &#x27;green&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <code>push()</code>:向数组末尾添加一个或多个元素，并返回新的长度</p> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="string">&#x27;green&#x27;</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">  <span class="keyword">var</span> res = arr.<span class="title function_">push</span>(<span class="number">2</span>,<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)  <span class="comment">//5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">//[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;green&#x27;, 2, &#x27;pink&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串 String"></a>字符串 String</h2><ol><li>属性<br><code>length</code>: 返回字符串的长度</li><li>方法<br><code>substr(start, length?)</code>: 接受<code>start</code>参数，表示从<code>start</code>索引开始,如果为负数,则从<code>strleng + start</code> 开始.<code>length</code>参数可选，表示截取的长度.不带该参数，则返回从<code>start</code>开始之后的内容，如果为负数或0,就返回空字符串</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;abcde&#x27;</span>.<span class="title function_">substr</span>(<span class="number">3</span>) <span class="comment">// &#x27;de&#x27;</span></span><br><span class="line"><span class="string">&#x27;abcde&#x27;</span>.<span class="title function_">substr</span>(-<span class="number">2</span>, <span class="number">1</span>) <span class="comment">// &#x27;d&#x27;</span></span><br><span class="line"><span class="string">&#x27;abcde&#x27;</span>.<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">1</span>) <span class="comment">// &#x27;c&#x27;</span></span><br><span class="line"><span class="string">&#x27;abcde&#x27;</span>.<span class="title function_">substr</span>(<span class="number">2</span>, -<span class="number">1</span>) <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="对象-Object"><a href="#对象-Object" class="headerlink" title="对象 Object"></a>对象 Object</h2><h2 id="Number对象"><a href="#Number对象" class="headerlink" title="Number对象"></a>Number对象</h2><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><h2 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h2><ol><li>属性<br><code>scrollTop</code>: 设置或返回滚动条到顶部的像素值,当一个元素没有滚动条,<code>scrollTop</code>值为0</li><li>方法</li></ol><h2 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h2><p><code>removeChild()</code>:删除字节点列表中的某个节点，删除成功就返回被删除的节点，否则返回null</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> abox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> h1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> small = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.small&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   small.<span class="title function_">removeChild</span>(p)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   abox.<span class="title function_">removeChild</span>(h1)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>children()</code>:返回被选元素的所有直接子元素</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p段落3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">       </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> abox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> h1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> small = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.small&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(abox.<span class="property">children</span>);  <span class="comment">//[div.small, h1]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>offsetTop</code>: 只读属性,返回当前元素相对于<code>offsetParent</code>元素顶部内边距的距离</p><blockquote><p>该属性不会随着元素的<code>translate</code>位移移动而改变,但是改变其他定位可以改变其数值</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ball.<span class="property">style</span>.<span class="property">marginTop</span> = <span class="string">&#x27;100px&#x27;</span> <span class="comment">// 改变</span></span><br><span class="line">ball.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;100px&#x27;</span> <span class="comment">// 改变</span></span><br><span class="line">ball.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;translateY(100px)&#x27;</span> <span class="comment">// 不改变</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装jdk</title>
      <link href="/2022/07/22/%E7%B3%BB%E7%BB%9F%E7%AF%87/centos%E5%AE%89%E8%A3%85jdk/"/>
      <url>/2022/07/22/%E7%B3%BB%E7%BB%9F%E7%AF%87/centos%E5%AE%89%E8%A3%85jdk/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Centos7-x系统安装JAVA环境"><a href="#Centos7-x系统安装JAVA环境" class="headerlink" title="Centos7.x系统安装JAVA环境"></a>Centos7.x系统安装JAVA环境</h1><ol><li><p>下载jdk文件</p><p> 此次下载的是jdk8版本,官网地址<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">Java SE Development Kit 8 Downloads</a>,最近官网改版后,需要Oracle账户才能登录下载,推荐使用国内镜像<a href="https://mirrors.huaweicloud.com/java/jdk/8u152-b16/">华为开源镜像站-jdk8</a></p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkcd /usr/local/src/java //新建并进入目录</span><br><span class="line"></span><br><span class="line">wget https://mirrors.huaweicloud.com/java/jdk/8u152-b16/jdk-8u152-linux-i586.tar.gz //下载文件</span><br><span class="line"></span><br><span class="line">tar -xzf jdk-8u152-linux-x64.tar.gz -C /usr/local/java //移动并重命名</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /java/bin</span><br><span class="line"></span><br><span class="line">./java -version //java version <span class="string">&quot;1.8.0_xxxx&quot;</span>,说明安装成功</span><br></pre></td></tr></table></figure></li><li><p>配置java环境</p><p> 配置jdk全局环境变量</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">//在末尾添加</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin/:<span class="variable">$&#123;PATH&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile //执行刚修改的文件</span><br><span class="line"></span><br><span class="line">java -version //java version <span class="string">&quot;1.8.0_xxxx&quot;</span>,说明配置成功</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>centos安装mysql57</title>
      <link href="/2022/07/22/%E7%B3%BB%E7%BB%9F%E7%AF%87/centos%E5%AE%89%E8%A3%85mysql57/"/>
      <url>/2022/07/22/%E7%B3%BB%E7%BB%9F%E7%AF%87/centos%E5%AE%89%E8%A3%85mysql57/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>查看当前安装得mysql(没有安装请跳过)</li></ol>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep -i mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#移除mysql依赖</span></span><br><span class="line">yum remove -y packageName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除mysql得文件</span></span><br><span class="line">find / -name mysql</span><br><span class="line"><span class="built_in">rm</span> -rf ./mysql_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>mysql5.7安装</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"><span class="comment"># 安装mysql 源</span></span><br><span class="line">yum localinstall mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看源</span></span><br><span class="line">rpm -qa | grep -i mysql</span><br><span class="line"><span class="comment"># 移除源</span></span><br><span class="line">rpm -e 文件名 --nodeps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装成功否</span></span><br><span class="line">yum repolist enabled | grep <span class="string">&quot;mysql.*-community.*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装mysql</span></span><br><span class="line">yum install -y mysql-community-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看mysql状态</span></span><br><span class="line">systemctl status mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">systemctl enabled mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改root账户密码</span></span><br><span class="line"><span class="comment"># mysql 安装完成之后，生成的默认密码在 /var/log/mysqld.log 文件中。使用 grep 命令找到日志中的密码</span></span><br><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入mysql</span></span><br><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;MyNewPass4!&#x27;</span>; </span><br><span class="line"><span class="comment"># 查看修改密码规则</span></span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">&#x27;validate_password%&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>其他纪要</p></li><li><p>安装报错Error: GPG check FAILED<br>  安装得时候<br>  <code>yum install packageName --nogpgcheck</code></p></li><li><p>跳过密码登录<br>  <code>vim /etc/my.cnf</code><br>  添加 <code>skip-grant-tables</code><br>  保存 <code>systemctl resatrt mysqld</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux命令积累</title>
      <link href="/2022/07/22/%E7%B3%BB%E7%BB%9F%E7%AF%87/linux%E5%91%BD%E4%BB%A4%E7%A7%AF%E7%B4%AF/"/>
      <url>/2022/07/22/%E7%B3%BB%E7%BB%9F%E7%AF%87/linux%E5%91%BD%E4%BB%A4%E7%A7%AF%E7%B4%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux命令积累"><a href="#Linux命令积累" class="headerlink" title="Linux命令积累"></a>Linux命令积累</h1><ul><li><a href="#linux%E5%91%BD%E4%BB%A4%E7%A7%AF%E7%B4%AF">Linux命令积累</a><ul><li><a href="#%E6%96%87%E4%BB%B6%E5%A4%B9%E7%AE%A1%E7%90%86">文件夹管理</a></li><li><a href="#%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%BC%96%E8%BE%91">文件管理编辑</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86">系统管理</a></li><li><a href="#%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86">磁盘管理</a></li><li><a href="#%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93">文件传输</a></li><li><a href="#%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF">网络通讯</a></li><li><a href="#%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86">设备管理</a></li><li><a href="#%E5%A4%87%E4%BB%BD%E5%8E%8B%E7%BC%A9">备份压缩</a></li><li><a href="#%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4">其他命令</a></li><li><a href="#%E6%89%A9%E5%B1%95">扩展</a></li></ul></li></ul><h2 id="文件夹管理"><a href="#文件夹管理" class="headerlink" title="文件夹管理"></a>文件夹管理</h2><ol><li><code>ls</code> - 显示指定工作目录下的内容及属性信息</li><li><code>mkdir</code> - 创建目录</li><li><code>cp</code> - 复制文件或目录</li><li><code>mv</code> - 移动或改名文件</li><li><code>pwd</code> - 显示当前路径</li><li><code>mkdir dir &amp;&amp; cd $_</code> - 创建并进入目录</li></ol><h2 id="文件管理编辑"><a href="#文件管理编辑" class="headerlink" title="文件管理编辑"></a>文件管理编辑</h2><ol><li><p><code>cat</code> - 在终端设备上显示文件内容</p></li><li><p><code>echo</code> - 输出字符串或提取Shell变量的值</p></li><li><p><code>rm</code> - 移除文件或目录</p></li><li><p><code>tail</code> - 查看文件尾部内容</p></li><li><p><code>rmdir</code> - 删除空目录</p></li><li><p><code>sed</code> - 编辑文件</p></li><li><p>提取文件名<br><code>$(basename $&#123;file%.*&#125;)</code> 提取文件名<br><code>$&#123;files##*/&#125;</code> 提取最后一级目录名<br><code>$&#123;basename $&#123;file##*/&#125;&#125;</code> 提取文件后缀</p></li></ol><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><ol><li><code>find</code> - 查找和搜索文件</li><li><code>netstat</code> - 显示当前的网络状态<blockquote><p>可以通过<code>cd /proc/$&#123;进程id&#125;/cwd</code>进入该进程项目的目录</p></blockquote> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a (all)显示所有选项，默认不显示LISTEN相关</span><br><span class="line">-t (tcp)仅显示tcp相关选项</span><br><span class="line">-u (udp)仅显示udp相关选项</span><br><span class="line">-n 拒绝显示别名，能显示数字的全部转化成数字。</span><br><span class="line">-l 仅列出有在 Listen (监听) 的服務状态</span><br><span class="line"></span><br><span class="line">-p 显示建立相关链接的程序名</span><br><span class="line">-r 显示路由信息，路由表</span><br><span class="line">-e 显示扩展信息，例如uid等</span><br><span class="line">-s 按各个协议进行统计</span><br><span class="line">-c 每隔一个固定时间，执行该netstat命令。</span><br></pre></td></tr></table></figure></li></ol><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><ol><li><code>df</code> - 显示磁盘空间使用情况</li></ol><h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2><ol><li><code>curl</code> - 文件传输工具</li></ol><h2 id="网络通讯"><a href="#网络通讯" class="headerlink" title="网络通讯"></a>网络通讯</h2><h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><h2 id="备份压缩"><a href="#备份压缩" class="headerlink" title="备份压缩"></a>备份压缩</h2><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><ol><li>kill -9 $(netstat -tlnp|grep 8080|awk ‘{print $7}’|awk -F ‘&#x2F;‘ ‘{print $1}’)  杀死指定端口的进程</li></ol><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>centos安装php74</title>
      <link href="/2022/07/22/%E7%B3%BB%E7%BB%9F%E7%AF%87/centos%E5%AE%89%E8%A3%85php74/"/>
      <url>/2022/07/22/%E7%B3%BB%E7%BB%9F%E7%AF%87/centos%E5%AE%89%E8%A3%85php74/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.安装 EPEL 软件包：<br>yum install -y epel-release</p><p>2.安装 remi 源(安装后在&#x2F;etc&#x2F;yum.repos.d&#x2F;下就有php源了)：<br>yum install -y <a href="http://rpms.remirepo.net/enterprise/remi-release-7.rpm">http://rpms.remirepo.net/enterprise/remi-release-7.rpm</a></p><p>3.安装 yum 扩展包：<br>yum install -y yum-utils</p><p>4.安装及安装扩展<br>yum install -y php74</p><p>yum install -y php74-php-fpm php74-php-gd php74-php-json php74-php-mbstring php74-php-mysqlnd php74-php-xml php74-php-xmlrpc php74-php-opcache</p><p>yum install -y php74-php-devel</p><p>5.查看php版本<br>php74 -v</p><p>6.启动和添加开机启动<br>systemctl start php74-php-fpm<br>systemctl enable php74-php-fpm</p><p>7.链接php文件<br>ln -s &#x2F;opt&#x2F;remi&#x2F;php74&#x2F;root&#x2F;usr&#x2F;bin&#x2F;php &#x2F;usr&#x2F;bin&#x2F;php</p><p>8.如果运行的是nginx而不是apache，修改<br>vi &#x2F;etc&#x2F;opt&#x2F;remi&#x2F;php74&#x2F;php-fpm.d&#x2F;<a href="http://www.conf/">www.conf</a><br>user &#x3D; apache<br>group &#x3D; apache<br>修改为<br>user &#x3D; nginx<br>group &#x3D; nginx</p><p>9.为nginx开启php的session权限<br>cd &#x2F;var&#x2F;opt&#x2F;remi&#x2F;php74&#x2F;lib&#x2F;php&#x2F; #进入php目录<br>chown -R nginx:nginx session #开启nginx保存session的权限</p><hr><p>配置文件目录<br>&#x2F;opt&#x2F;remi&#x2F;php74&#x2F;root&#x2F;usr&#x2F;bin&#x2F;php-config<br>&#x2F;var&#x2F;opt&#x2F;remi&#x2F;php74&#x2F;lib&#x2F;php&#x2F;session<br>&#x2F;etc&#x2F;opt&#x2F;remi&#x2F;php74&#x2F;php.ini<br>&#x2F;etc&#x2F;opt&#x2F;remi&#x2F;php74&#x2F;php-fpm.d&#x2F;<a href="http://www.conf/">www.conf</a></p><p>卸载<br>yum remove php74*</p>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux系统文件分类</title>
      <link href="/2022/07/22/%E7%B3%BB%E7%BB%9F%E7%AF%87/linux%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB/"/>
      <url>/2022/07/22/%E7%B3%BB%E7%BB%9F%E7%AF%87/linux%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux安装后文件的分类及作用"><a href="#Linux安装后文件的分类及作用" class="headerlink" title="Linux安装后文件的分类及作用"></a>Linux安装后文件的分类及作用</h1><h2 id="文件系统的类型"><a href="#文件系统的类型" class="headerlink" title="文件系统的类型"></a>文件系统的类型</h2><p>Linux文件的类型有四种. 普通文件, 目录文件, 连接文件和特殊文件, 可用file命令识别.</p><ol><li><p><strong>普通文件</strong>: 如文本文件, 代码文件, shell脚本, 二进制可执行文件等,可用<code>cat, less, vi, emacs</code>来查看内容, 使用mv来改名.</p></li><li><p><strong>目录文件</strong>: 包括文件名、子目录名及其指针。它是LINUX储存文件名的唯一地方，可用ls列出目录文件.</p></li><li><p><strong>连接文件</strong>: 是指向同一索引节点的那些目录条目。用ls来查看是，连接文件的标志用l开头，而文件面后以”-&gt;”指向所连接的文件。</p></li><li><p><strong>特殊文件</strong>: LINUX的一些设备如磁盘、终端、打印机等都在文件系统中表示出来，则一类文件就是特殊文件，常放在&#x2F;dev目录内。例如，软驱A称为&#x2F;dev&#x2F;fd0。LINUX无C：的概念，而是用&#x2F;dev&#x2F;had来自第一硬盘。</p></li></ol><h2 id="文件系统分类"><a href="#文件系统分类" class="headerlink" title="文件系统分类"></a>文件系统分类</h2><ol><li><p><code>/</code>: 这是根目录,所有文件从根目录开始</p></li><li><p><code>/root</code>: 这是系统管理员(root user)的目录。对于系统来说，系统管理员就好比是上帝，它能对系统做任何事情，甚至包括删除你的文件。因此，请小心使用root帐号。</p></li><li><p><code>/bin</code>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><code>/boot</code>：<br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><code>/dev</code> ：<br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><code>/etc</code>：<br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><code>/home</code>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><code>/lib</code>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><code>/lost+found</code>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><code>/media</code>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><code>/mnt</code>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><code>/opt</code>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><code>/proc</code>：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure></li><li><p><code>/sbin</code>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><code>/selinux</code>：<br> 这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><code>/srv</code>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><code>/sys</code>：<br>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。<br>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。<br>该文件系统是内核设备树的一个直观反映。<br>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><code>/tmp</code>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><code>/usr</code>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p><ul><li><code>/usr/bin</code>：</li></ul></li></ol><p>系统用户使用的应用程序。</p><pre><code>- /usr/sbin：</code></pre><p>超级用户使用的比较高级的管理程序和系统守护程序。</p><pre><code>- /usr/src：</code></pre><p>内核源代码默认的放置目录。</p><ol start="20"><li><p><code>/var</code>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><code>/run</code>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p></li></ol><blockquote><p><code>/bin, /sbin, /usr/bin, /usr/sbin</code>: 这是系统预设的执行文件的放置目录，比如 ls 就是在 &#x2F;bin&#x2F;ls 目录下的.<br>值得提出的是，<code>/bin, /usr/bin</code> 是给系统用户使用的指令（除root外的通用户），而<code>/sbin, /usr/sbin</code> 则是给 root 使用的指令。<br><code>/var</code>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 <code>/var/log</code> 目录下，另外 mail 的预设放置也是在这里。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>服务器环境配置</title>
      <link href="/2022/07/22/%E7%B3%BB%E7%BB%9F%E7%AF%87/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/07/22/%E7%B3%BB%E7%BB%9F%E7%AF%87/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="配置服务器主机环境"><a href="#配置服务器主机环境" class="headerlink" title="配置服务器主机环境"></a>配置服务器主机环境</h1><h2 id="进行基础环境配置"><a href="#进行基础环境配置" class="headerlink" title="进行基础环境配置"></a>进行基础环境配置</h2><ol><li><p>查看当前系统的类型</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/issue          //适用于所有Linux发行版</span><br><span class="line"><span class="built_in">cat</span> /etc/redhat-release //仅适用于redhat系列的Linux</span><br></pre></td></tr></table></figure></li><li><p>配置网络开机自启</p><blockquote><p>因为适用主机作为服务器,重启时需要保证网络自动开启</p></blockquote> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts //进入网络配置文件夹</span><br><span class="line">vim ifcfg-eno1                    //进入配置项，有可能是ifcfg-eno0，视机器不同</span><br><span class="line">ONBOOT=<span class="built_in">yes</span>                        //将ONBOOT=no改为ONBOOT=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure></li><li><p>开启SSH连接</p><blockquote><p>centos7开启ssh连接的方法,将下面命令的前的<code>#</code>删掉,或者修改<code>yes</code>和<code>no</code></p></blockquote> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">Port: 22                    //开启端口监听</span><br><span class="line">PermitRootLogin <span class="built_in">yes</span>         //允许远程登录</span><br><span class="line">PasswordAuthentication <span class="built_in">yes</span>  //开启密码登录</span><br></pre></td></tr></table></figure><p> 然后保存文件并退出</p></li><li><p>开启sshd服务</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service sshd start</span><br></pre></td></tr></table></figure><p> 检查sshd服务是否已经开启,输入<code>ps -e | grep sshd</code></p><p> 显示<code>2248 ? 00:00:00 sshd</code>则开启成功</p><p> 查看ip地址：<code>ifconfig</code></p></li></ol><h2 id="配置软件环境"><a href="#配置软件环境" class="headerlink" title="配置软件环境"></a>配置软件环境</h2><h3 id="使用宝塔面板一键安装"><a href="#使用宝塔面板一键安装" class="headerlink" title="使用宝塔面板一键安装"></a>使用宝塔面板一键安装</h3><ol><li><p>centos7.x版本下安装命令：</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p> 安装完成之后可以看到用户名和密码,如果忘记密码可在远程终端输入<code>bt</code>命令查看宝塔相关信息,包括用户名和密码</p><p> <a href="https://www.bt.cn/bbs/thread-19376-1-1.html">其他Linux版本安装宝塔面板链接&gt;</a></p></li><li><p>一键配置LNMP<br> 安装完宝塔面板,在浏览器中输入<code>ip地址:8888</code>进入宝塔页面,即可在软件商店安装各种环境</p></li></ol><h3 id="使用wget网络下载安装"><a href="#使用wget网络下载安装" class="headerlink" title="使用wget网络下载安装"></a>使用wget网络下载安装</h3><h2 id="相关文献"><a href="#相关文献" class="headerlink" title="相关文献"></a>相关文献</h2><ol><li><a href="https://www.cnblogs.com/wzk-0000/p/7483262.html">查看Linux系统版本</a></li><li><a href="https://blog.csdn.net/trackle400/article/details/52755571">虚拟机下CentOS7开启SSH连接</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git的基础使用</title>
      <link href="/2022/07/22/Git%E7%AF%87/git%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/22/Git%E7%AF%87/git%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h2 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>在 Windows 上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行：</p><p><a href="http://msysgit.github.com/">http://msysgit.github.com/</a></p><p>完成安装之后，就可以使用命令行的 <code>git</code> 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。</p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>如果要在 Linux 上安装预编译好的 Git 二进制安装包，可以直接用系统提供的包管理工具。在 Fedora 上用 yum 安装：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install git-core</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 Ubuntu 这类 Debian 体系的系统上，可以用 apt-get 安装：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install git</span><br></pre></td></tr></table></figure><h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><p>在 Mac 上安装 Git 有两种方式。最容易的当属使用图形化的 Git 安装工具，界面如图 1-7，下载地址在：</p><p><a href="http://code.google.com/p/git-osx-installer">http://code.google.com/p/git-osx-installer</a></p><p>另一种是通过 MacPorts <a href="http://www.macports.org/">http://www.macports.org</a> 安装。如果已经装好了 MacPorts，用下面的命令安装 Git：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo port install git-core +svn +doc +bash_completion +gitweb</span><br></pre></td></tr></table></figure><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>Git 提供了一个叫做 git config 的工具 - <code>etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</p><ul><li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</li><li>当前项目的 git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</li></ul><p>在 Windows 系统上，Git 会找寻用户主目录下的 <code>.gitconfig</code> 文件。主目录即 <code>$HOME</code> 变量指定的目录，一般都是 <code>C:\Documents andSettings\$USER</code>。此外，Git 还会尝试找寻 <code>/etc/gitconfig</code> 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。 第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，<br>说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name John Doe</span><br><span class="line">git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure><h2 id="git-基础"><a href="#git-基础" class="headerlink" title="git 基础"></a>git 基础</h2><h3 id="取得项目地址"><a href="#取得项目地址" class="headerlink" title="取得项目地址"></a>取得项目地址</h3><h3 id="在工作目录中初始化新仓库"><a href="#在工作目录中初始化新仓库" class="headerlink" title="在工作目录中初始化新仓库"></a>在工作目录中初始化新仓库</h3><p>要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>如果当前目录下有几个文件想要纳入版本控制，需要先用 <code>git add</code> 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add *.c</span><br><span class="line">git add README</span><br><span class="line">git commit -m &#x27;initial project version&#x27;</span><br></pre></td></tr></table></figure><h3 id="从现有仓库克隆"><a href="#从现有仓库克隆" class="headerlink" title="从现有仓库克隆"></a>从现有仓库克隆</h3><p>克隆仓库的命令格式为 <code>git clone [url]</code>。比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/schacon/grit.git</span><br><span class="line">git clone git://github.com/schacon/grit.git mygrit //重命名项目</span><br></pre></td></tr></table></figure><h3 id="记录更新到仓库"><a href="#记录更新到仓库" class="headerlink" title="记录更新到仓库"></a>记录更新到仓库</h3><p>在编辑过某些文件之后，Git 将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件，如此重复</p><h3 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h3><p>要确定哪些文件当前处于什么状态，可以用 <code>git status</code> 命令。如果在克隆仓库之后立即执行此命令，会看到类似这样的输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"># On branch master</span><br><span class="line">nothing to commit (working directory clean</span><br></pre></td></tr></table></figure><h3 id="跟踪新文件"><a href="#跟踪新文件" class="headerlink" title="跟踪新文件"></a>跟踪新文件</h3><p>使用命令 <code>git add</code> 开始跟踪一个新文件。所以，要跟踪 README 文件，运行:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add README</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;添加要纳入版本控制的文件 <code>git add *</code> 添加所有文件 git add 三种效果根据文件状态不同</p><ul><li><code>untracked</code> 跟踪新文件</li><li><code>unmodified</code></li><li><code>modified</code> 放到暂存区</li><li><code>staged</code></li></ul><p>合并 把冲突文件标记为以解决 git commit -m &#39;项目修改描述&#39; ### 回滚</p><p>git reset –hard id 回滚 id 版本 git reset –hard HEAD^ 回退上一个版本 ### 分支</p><p>如果添加不想上传文件可以删除不需要的文件<br>git rm -r –cached [文件名]</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch//查看分支</span><br><span class="line">git branch -a//查看所有分支包括远程*表示当前分支</span><br><span class="line">git branch day01//创建分支</span><br><span class="line">git branch -d day01  //删除day01分支</span><br><span class="line">git checkout 分支名 //进入当前分支</span><br><span class="line">git merge 分支名 //合并分支</span><br><span class="line">git checkout -b 分支名 //创建并跳转</span><br></pre></td></tr></table></figure><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git://github.com/schacon/grit.git(地址) mytest(重新命名) //克隆远程到本地</span><br><span class="line">git remote add &lt;origin&gt; &lt;address&gt; //添加到远程仓库 origin为仓库名</span><br><span class="line">git push -u origin master // 推送master分支到远程仓库</span><br><span class="line">git push origin [本地分支名]:[远程分支名]  //推送本地分支到远程分支</span><br><span class="line">git push origin --delete [远程分支]  //删除远程分支</span><br></pre></td></tr></table></figure><h3 id="从远程仓库更新到本地"><a href="#从远程仓库更新到本地" class="headerlink" title="从远程仓库更新到本地"></a><strong>从远程仓库更新到本地</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch origin master</span><br><span class="line">git log -p master origin/master</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure><p>以上命令的含义： 首先从远程的 origin 的 master 主分支下载最新的版本到 origin&#x2F;master 分支上 然后比较本地的 master 分支和 origin&#x2F;master 分支的差别 最后进行合并</p><h3 id="从远程仓库更新到本地并合并"><a href="#从远程仓库更新到本地并合并" class="headerlink" title="从远程仓库更新到本地并合并"></a><strong>从远程仓库更新到本地并合并</strong></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin master // 上述命令其实相当于 git fetch + git merge</span><br></pre></td></tr></table></figure><h2 id="Git-进阶部分"><a href="#Git-进阶部分" class="headerlink" title="Git 进阶部分"></a>Git 进阶部分</h2><h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log [--pretty=online] //查看最近几次提交的记录 `[--pretty=online]`可选参数会显示详细信息比如注释</span><br><span class="line">git reset --hard [commit id]或者git reset --hard HEAD^ //回退到指定(commit id)版本或者回退到上一版本(HEAD^),上上版本(HEAD^^)</span><br><span class="line">git reflog //查看最近几次操作记录 回退远程仓库需要在本地回退到当前版本再强制推送到远程</span><br><span class="line">git push -f origin master //表示推送到主分支</span><br></pre></td></tr></table></figure><h3 id="合并提交代码"><a href="#合并提交代码" class="headerlink" title="合并提交代码"></a>合并提交代码</h3><blockquote><p>为了让代码提交更简洁，合并到主分支更容易，使用变基 rebase 简化 commit</p></blockquote><ol><li>先切换到主分支更新代码</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull origin master</span><br><span class="line">//然后切换到修改文件的分支</span><br><span class="line">git checkout [branch]</span><br><span class="line">git rebase master //进行变基操作</span><br><span class="line"> /*</span><br><span class="line">*[此时解决冲突并提交代码]</span><br><span class="line">*/</span><br><span class="line">git push origin [远程分支] //提交,可能会使用--force参数强制提交</span><br><span class="line">或者远程变基</span><br><span class="line">git rebase -i origin/master</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>使用 stash 命令提交，为了保证跟新代的成功，使用暂存操作</li></ol><p><img src="http://blog.ws865.com/wp-content/uploads/2019/11/1599557045-5bb2990fc95ada8.png" alt="暂存模式"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git stash save -a &#x27;message&#x27; //将本地修改添加到暂存区</span><br><span class="line">git stash list //查看暂存区列表</span><br><span class="line">git pull origin master //更新代码到当前分支</span><br><span class="line">git stash pop stash@&#123;id&#125; //恢复改动</span><br><span class="line">/*</span><br><span class="line">*[此时解决冲突并提交代码]</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">**推荐: ** [如何优雅的进行版本回退 ·</span><br><span class="line">includeios/document](https://github.com/includeios/document/issues/12) 1. -</span><br><span class="line">[版本回退 -</span><br><span class="line">廖雪峰的官方网站](https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192)</span><br><span class="line">2. - [git 回退到某版本后,再在此版本上更新,无法 push · Ruby</span><br><span class="line">China](https://ruby-china.org/topics/11637) 3. - [git回退版本（線上和本地倉庫）</span><br><span class="line">| 程式前沿](https://codertw.com/程式語言/561978/) 4. - [git reset</span><br><span class="line">soft,hard,mixed之区别深解 - 菜鸟++ -</span><br><span class="line">博客园](https://www.cnblogs.com/keystone/p/10700617.html)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置window策略组</title>
      <link href="/2022/07/20/%E7%B3%BB%E7%BB%9F%E7%AF%87/%E9%85%8D%E7%BD%AEwindow%E7%AD%96%E7%95%A5%E7%BB%84/"/>
      <url>/2022/07/20/%E7%B3%BB%E7%BB%9F%E7%AF%87/%E9%85%8D%E7%BD%AEwindow%E7%AD%96%E7%95%A5%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>刚刚安装好的node环境，全局安装包时<br>  例： <code>express-generator</code>，安装后在全局环境中是无法直接使用的，需要配置powershell管理策略<br>    <a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2" title="powershell管理策略">powershell管理策略</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Get-ExecutionPolicy // restricted</span><br></pre></td></tr></table></figure><p> <strong>更改执行策略</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned // 选择A</span><br></pre></td></tr></table></figure><p><strong>设置特定作用域的执行策略</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br></pre></td></tr></table></figure><p> 更改执行策略的命令可以成功，但仍不能更改有效执行策略。<br> 例如，为本地计算机设置执行策略的命令可以成功，但被当前用户的执行策略重写。  </p><p><strong>删除执行策略</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy -ExecutionPolicy Undefined -Scope CurrentUser</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实用的window工具</title>
      <link href="/2022/07/10/%E5%B7%A5%E5%85%B7%E7%AF%87/%E5%AE%9E%E7%94%A8%E7%9A%84window%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/07/10/%E5%B7%A5%E5%85%B7%E7%AF%87/%E5%AE%9E%E7%94%A8%E7%9A%84window%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="snipaste"><a href="#snipaste" class="headerlink" title="snipaste"></a>snipaste</h3><p>截屏粘贴软件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">F1: 截屏</span><br><span class="line">F3: 粘贴</span><br></pre></td></tr></table></figure><h3 id="powerToys"><a href="#powerToys" class="headerlink" title="powerToys"></a>powerToys</h3><p>window工具集合（取色器,文件加载预览,图片大小调整器,键盘管理器,批量文件命名）</p><blockquote><p>官方文档：用于自定义 Windows 的实用工具<a href="https://docs.microsoft.com/zh-cn/windows/powertoys/">https://docs.microsoft.com/zh-cn/windows/powertoys/</a></p></blockquote><p> 快捷键： <code>win + shift + c</code> 提取颜色吸管</p><h3 id="deskpin"><a href="#deskpin" class="headerlink" title="deskpin"></a>deskpin</h3><p>将指定窗口置顶的工具<br><a href="http://www.ws865.com/wp-content/uploads/2022/01/04ed231da3ffb37.zip" title="DeskPins-1.32-setup">DeskPins-1.32-setup</a><br>快捷键：<code>ctrl + f12</code> 切换窗口是否置顶</p><h3 id="V2rayN"><a href="#V2rayN" class="headerlink" title="V2rayN"></a>V2rayN</h3><p>好用代理软件，需要自己去找VM服务器<br> 下载地址: <a href="http://www.ws865.com/wp-content/uploads/2022/01/3750609bc062333.zip" title="v2rayN-Core">v2rayN-Core</a></p><h3 id="Ngrok"><a href="#Ngrok" class="headerlink" title="Ngrok"></a>Ngrok</h3><p>内网穿透，将本地端口暴露至公网<br>下载链接：<a href="http://www.ws865.com/wp-content/uploads/2022/01/2860e04de9bc7b5.zip" title="ngrok内网穿透">ngrok内网穿透</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
